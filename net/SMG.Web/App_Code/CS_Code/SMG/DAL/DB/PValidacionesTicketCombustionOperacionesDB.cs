//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using Iberdrola.Commons.BaseClasses;
using Iberdrola.Commons.DataAccess;
using Iberdrola.Commons.Exceptions;
using Iberdrola.Commons.Messages;
using Iberdrola.SMG.DAL.DTO;

namespace Iberdrola.SMG.DAL.DB
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PValidacionesTicketCombustion
    /// </summary>
    public partial class PValidacionesTicketCombustionDB
    {
        /// <summary>
        /// Obtiene los PValidacionesTicketCombustionDTO que cumple con el criterio
        /// </summary>
        /// <param name="tipoPeticion"></param>
        /// <returns>Lista de PValidacionesTicketCombustionDTO con todos los objetos</returns>
        public List<PValidacionesTicketCombustionDTO> ObtenerTodosPorTipoPeticion(string tipoPeticion)
        {
            IDataReader dr = null;            
            List<PValidacionesTicketCombustionDTO> lista = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                lista = new List<PValidacionesTicketCombustionDTO>();

				string[] aNombres = new string[1];
                DbType[] aTipos = new DbType[1];
                object[] aValores = new object[1];
                
                aNombres[0] = "@pTIPO_PETICION";
                aTipos[0] = DbType.String;
                aValores[0] = tipoPeticion;

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPValidacionesTicketCombustionGetAllPorTipoPeticion", aNombres, aTipos, aValores);

                // Recuperamos la lista de objetos encontrados.
                while (dr.Read())
                {
                    lista.Add(ObtenerPValidacionesTicketCombustionDTO(dr));
                }
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004"); 
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }

            // retornamos la lista de objetos buscados, si no se ha encontrato nada se retorna null
            return lista;
        }

        public DataTable ObtenerInformacionExtraAsociadaTicketCombustion(Int64 idSolicitud)
        {
            DataTable dt = null;

            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] ParamsName = new string[1];
                DbType[] ParamsType = new DbType[1];
                object[] ParamsValue = new object[1];

                ParamsName[0] = "@ID_SOLICITUD";
                ParamsValue[0] = idSolicitud;
                ParamsType[0] = DbType.Int64;

                dt = db.RunProcDataTable("spSMGTicketCombustionObtenerInfExtra", ParamsName, ParamsType, ParamsValue);
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }


            // retornamos el dt, si no se ha encontrato nada se retorna null
            return dt;
        }

        public DataTable ObtenerSolicitudAveriaAsociadaVisita(string codContrato, int codVisita)
        {
            DataTable dt = null;

            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[2];
                DbType[] aTipos = new DbType[2];
                object[] aValores = new object[2];

                aNombres[0] = "@pCOD_CONTRATO";
                aTipos[0] = DbType.String;
                aValores[0] = codContrato;

                aNombres[1] = "@pCOD_VISITA";
                aTipos[1] = DbType.Int16;
                aValores[1] = codVisita;

                dt = db.RunProcDataTable("spSMGObtenerSolicitudAveriaAsociadaVisita", aNombres, aTipos, aValores);
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }


            // retornamos el dt, si no se ha encontrato nada se retorna null
            return dt;
        }


        public void CerrarVisitaErroneaCuandoSolicitudResuelta(decimal idSolicitud, string usuario)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[2];
                DbType[] aTipos = new DbType[2];
                object[] aValores = new object[2];

                aNombres[0] = "@pID_SOLICITUD";
                aTipos[0] = DbType.Decimal;
                aValores[0] = idSolicitud;

                aNombres[1] = "@pUSUARIO";
                aTipos[1] = DbType.String;
                aValores[1] = usuario;

                db.RunProcEscalar("spSMGCerrarVisitaErroneaCuandoSolicitudAveriaResuelta", aNombres, aTipos, aValores);
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
        }

        public decimal? InsertarTicketCombustionResumenResultado(TicketCombustionDTO dto, string origen, decimal? idTraza, string usuario, string resultado)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[28];
                DbType[] aTipos = new DbType[28];
                object[] aValores = new object[28];

                aNombres[0] = "@pORIGEN";
                aTipos[0] = DbType.String;
                aValores[0] = origen;

                aNombres[1] = "@pID_TRAZA";
                aTipos[1] = DbType.Decimal;
                aValores[1] = idTraza;

                aNombres[2] = "@pCOD_USUARIO";
                aTipos[2] = DbType.String;
                aValores[2] = usuario;

                aNombres[3] = "@pRESULTADO";
                aTipos[3] = DbType.String;
                aValores[3] = resultado;

                aNombres[4] = "@pID_TICKET_COMBUSTION";
                aTipos[4] = DbType.Decimal;
                aValores[4] = dto.IdTicketCombustion;

                aNombres[5] = "@pCOD_CONTRATO";
                aTipos[5] = DbType.String;
                aValores[5] = dto.CodigoContrato;

                aNombres[6] = "@pID_SOLICITUD";
                aTipos[6] = DbType.Decimal;
                aValores[6] = dto.IdSolicitud;

                aNombres[7] = "@pCOD_VISITA";
                aTipos[7] = DbType.Int32;
                aValores[7] = dto.CodigoVisita;

                aNombres[8] = "@pTIPO_EQUIPO";
                aTipos[8] = DbType.Decimal;
                aValores[8] = dto.TipoEquipo;

                aNombres[9] = "@pTEMPERATURA_PDC";
                aTipos[9] = DbType.Decimal;
                aValores[9] = dto.TemperaturaPDC;

                aNombres[10] = "@pCO_CORREGIDO";
                aTipos[10] = DbType.Decimal;
                aValores[10] = dto.COCorregido;

                aNombres[11] = "@pTIRO";
                aTipos[11] = DbType.Decimal;
                aValores[11] = dto.Tiro;

                aNombres[12] = "@pCO_AMBIENTE";
                aTipos[12] = DbType.Decimal;
                aValores[12] = dto.COAmbiente;

                aNombres[13] = "@pO2";
                aTipos[13] = DbType.Decimal;
                aValores[13] = dto.O2;

                aNombres[14] = "@pCO";
                aTipos[14] = DbType.Decimal;
                aValores[14] = dto.CO;

                aNombres[15] = "@pCO2";
                aTipos[15] = DbType.Decimal;
                aValores[15] = dto.CO2;

                aNombres[16] = "@pLAMBDA";
                aTipos[16] = DbType.Decimal;
                aValores[16] = dto.Lambda;

                aNombres[17] = "@pRENDIMIENTO";
                aTipos[17] = DbType.Decimal;
                aValores[17] = dto.Rendimiento;

                aNombres[18] = "@pTEMPERATURA_MAX_ACS";
                aTipos[18] = DbType.Decimal;
                aValores[18] = dto.TemperaturaMaxACS;

                aNombres[19] = "@pCAUDAL_ACS";
                aTipos[19] = DbType.Decimal;
                aValores[19] = dto.CaudalACS;

                aNombres[20] = "@pPOTENCIA_UTIL";
                aTipos[20] = DbType.Decimal;
                aValores[20] = dto.PotenciaUtil;

                aNombres[21] = "@pTEMPERATURA_ENTRADA_ACS";
                aTipos[21] = DbType.Decimal;
                aValores[21] = dto.TemperaturaEntradaACS;

                aNombres[22] = "@pTEMPERATURA_SALIDA_ACS";
                aTipos[22] = DbType.Decimal;
                aValores[22] = dto.TemperaturaSalidaACS;

                aNombres[23] = "@pNOMBRE_FICHERO_TC";
                aTipos[23] = DbType.String;
                aValores[23] = dto.NombreFichero;

                aNombres[24] = "@pNOMBRE_FICHERO_CH";
                aTipos[24] = DbType.String;
                aValores[24] = dto.NombreFicheroConductoHumos;

                aNombres[25] = "@pTIPO_VISITA";
                aTipos[25] = DbType.String;
                aValores[25] = dto.TipoVisita;

                aNombres[26] = "@pID_SOLICITUD_AVERIA";
                aTipos[26] = DbType.Decimal;
                aValores[26] = dto.IdSolicitudAveria;

                aNombres[27] = "@pCOMENTARIOS";
                aTipos[27] = DbType.String;
                aValores[27] = dto.Comentarios;


                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGTicketCombustionResumenProcesadosInsert", aNombres, aTipos, aValores);
                           
                return (decimal)result;

            }
            catch (BaseException ex1)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2005");
            }

            return null;
        }

    }
}