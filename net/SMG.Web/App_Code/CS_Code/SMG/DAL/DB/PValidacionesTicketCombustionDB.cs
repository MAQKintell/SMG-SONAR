//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using Iberdrola.Commons.BaseClasses;
using Iberdrola.Commons.DataAccess;
using Iberdrola.Commons.Exceptions;
using Iberdrola.Commons.Messages;
using Iberdrola.SMG.DAL.DTO;

namespace Iberdrola.SMG.DAL.DB
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PValidacionesTicketCombustion
    /// </summary>
    public partial class PValidacionesTicketCombustionDB
    {
        /// <summary>
        /// Obtiene el PValidacionesTicketCombustionDTO que cumple con la PK y no esté de baja
        /// </summary>
        /// <param name="idValidacion"></param>
        /// <returns>PValidacionesTicketCombustionDTO que cumple con la PK, null si no lo encuentra.</returns>
        public PValidacionesTicketCombustionDTO Obtener(decimal idValidacion)
        {
            IDataReader dr = null;
            PValidacionesTicketCombustionDTO dto = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[1];
                DbType[] aTipos = new DbType[1];
                object[] aValores = new object[1];
                
                aNombres[0] = "@pID_VALIDACION";
                aTipos[0] = DbType.Decimal;
                aValores[0] = idValidacion;
                
                

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPValidacionesTicketCombustionGet", aNombres, aTipos, aValores);
                
                // Rebuperamos el objeto buscado
                if (dr.Read())
                {
                    dto = ObtenerPValidacionesTicketCombustionDTO(dr);
                }
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004"); 
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }
            
            // retornamos el objeto buscado, si no se ha encontrato nada se retorna null
            return dto;
        }
        
        /// <summary>
        /// Obtiene todos PValidacionesTicketCombustionDTO que no estén de baja
        /// </summary>
        /// <returns>Lista de PValidacionesTicketCombustionDTO con todos los objetos</returns>
        public List<PValidacionesTicketCombustionDTO> ObtenerTodos()
        {
            IDataReader dr = null;            
            List<PValidacionesTicketCombustionDTO> lista = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                lista = new List<PValidacionesTicketCombustionDTO>();

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPValidacionesTicketCombustionGetAll", null, null, null);

                // Recuperamos la lista de objetos encontrados.
                while (dr.Read())
                {
                    lista.Add(ObtenerPValidacionesTicketCombustionDTO(dr));
                }
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004"); 
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }

            // retornamos la lista de objetos buscados, si no se ha encontrato nada se retorna null
            return lista;
        }
        
        /// <summary>
        /// Inserta el PValidacionesTicketCombustionDTO
        /// </summary>
        /// <param name="dto">Datos a guardar</param>
        /// <returns>PValidacionesTicketCombustionDTO con la clave autogenerada informada (si la tuviera)</returns>
        public PValidacionesTicketCombustionDTO Insertar(PValidacionesTicketCombustionDTO dto)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                
                string[] aNombres = new string[12];
                DbType[] aTipos = new DbType[12];
                object[] aValores = new object[12];
                
                aNombres[0] = "@pTIPO_PETICION";
                aTipos[0] = DbType.String;
                aValores[0] = dto.TipoPeticion;
                
                aNombres[1] = "@pID_TIPO_TICKET";
                aTipos[1] = DbType.Decimal;
                aValores[1] = dto.IdTipoTicket;
                
                aNombres[2] = "@pNOMBRE_CAMPO";
                aTipos[2] = DbType.String;
                aValores[2] = dto.NombreCampo;
                
                aNombres[3] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[3] = DbType.String;
                aValores[3] = dto.NombreCampoRequest;
                
                aNombres[4] = "@pORDEN";
                aTipos[4] = DbType.Decimal;
                aValores[4] = dto.Orden;
                
                aNombres[5] = "@pACTIVO";
                aTipos[5] = DbType.Boolean;
                aValores[5] = dto.Activo;
                
                aNombres[6] = "@pOBLIGATORIO";
                aTipos[6] = DbType.Boolean;
                aValores[6] = dto.Obligatorio;
                
                aNombres[7] = "@pDEPENDECIA";
                aTipos[7] = DbType.String;
                aValores[7] = dto.Dependecia;
                
                aNombres[8] = "@pVALOR_MINIMO";
                aTipos[8] = DbType.String;
                aValores[8] = dto.ValorMinimo;
                
                aNombres[9] = "@pVALOR_MAXIMO";
                aTipos[9] = DbType.String;
                aValores[9] = dto.ValorMaximo;
                
                aNombres[10] = "@pANOMALIA";
                aTipos[10] = DbType.String;
                aValores[10] = dto.Anomalia;

                aNombres[11] = "@pPRIORIDAD";
                aTipos[11] = DbType.Decimal;
                aValores[11] = dto.Prioridad;

                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGPValidacionesTicketCombustionInsert", aNombres, aTipos, aValores);
                dto.IdValidacion = (decimal)result;

            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2005");
            }
            return dto;
        }
                
        /// <summary>
        /// Actualiza el PValidacionesTicketCombustionDTO
        /// </summary>
        /// <param name="dto">Datos a actualizar</param>
        /// <returns>int con el número de filas actualizadas</returns>
        public int Actualizar(PValidacionesTicketCombustionDTO dto)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                
                string[] aNombres = new string[13];
                DbType[] aTipos = new DbType[13];
                object[] aValores = new object[13];
                
                aNombres[0] = "@pID_VALIDACION";
                aTipos[0] = DbType.Decimal;
                aValores[0] = dto.IdValidacion;
                
                aNombres[1] = "@pTIPO_PETICION";
                aTipos[1] = DbType.String;
                aValores[1] = dto.TipoPeticion;
                
                aNombres[2] = "@pID_TIPO_TICKET";
                aTipos[2] = DbType.Decimal;
                aValores[2] = dto.IdTipoTicket;
                
                aNombres[3] = "@pNOMBRE_CAMPO";
                aTipos[3] = DbType.String;
                aValores[3] = dto.NombreCampo;
                
                aNombres[4] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[4] = DbType.String;
                aValores[4] = dto.NombreCampoRequest;
                
                aNombres[5] = "@pORDEN";
                aTipos[5] = DbType.Decimal;
                aValores[5] = dto.Orden;
                
                aNombres[6] = "@pACTIVO";
                aTipos[6] = DbType.Boolean;
                aValores[6] = dto.Activo;
                
                aNombres[7] = "@pOBLIGATORIO";
                aTipos[7] = DbType.Boolean;
                aValores[7] = dto.Obligatorio;
                
                aNombres[8] = "@pDEPENDECIA";
                aTipos[8] = DbType.String;
                aValores[8] = dto.Dependecia;
                
                aNombres[9] = "@pVALOR_MINIMO";
                aTipos[9] = DbType.String;
                aValores[9] = dto.ValorMinimo;
                
                aNombres[10] = "@pVALOR_MAXIMO";
                aTipos[10] = DbType.String;
                aValores[10] = dto.ValorMaximo;
                
                aNombres[11] = "@pANOMALIA";
                aTipos[11] = DbType.String;
                aValores[11] = dto.Anomalia;

                aNombres[12] = "@pPRIORIDAD";
                aTipos[12] = DbType.Decimal;
                aValores[12] = dto.Prioridad;

                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGPValidacionesTicketCombustionUpdate", aNombres, aTipos, aValores);
                
                // Retornamos el número de filas afectadas.
                return (int) result;
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2005");
            }
        }
        
        /// <summary>
        /// Elimina el PValidacionesTicketCombustionDTO. si el objeto tiene un campo de fecha baja
        /// para hacer bajas lógicas realiza un borrado lógico
        /// </summary>
        /// <param name="idValidacion"></param>
        /// <returns>int con el número de filas eliminadas</returns>
        public int Eliminar(decimal idValidacion)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[1];
                DbType[] aTipos = new DbType[1];
                object[] aValores = new object[1];
                
                aNombres[0] = "@pID_VALIDACION";
                aTipos[0] = DbType.Decimal;
                aValores[0] = idValidacion;
                
                

                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGPValidacionesTicketCombustionDelete", aNombres, aTipos, aValores);

                // Retornamos el número de filas afectadas.
                return (int) result;
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
        }

        /// <summary>
        /// Obtiene los PValidacionesTicketCombustionDTO que cumple con la el criterio de búsqueda y no está de baja
        /// </summary>
        /// <param name="dtoFiltro">Filtro de PValidacionesTicketCombustion a aplicar</param>
        /// <param name="paginacion">Datos de la paginación</param>
        /// <returns>Lista de PValidacionesTicketCombustionDTO que cumplen con los filtros indicados.</returns>
        public List<PValidacionesTicketCombustionDTO> Buscar(PValidacionesTicketCombustionDTO dtoFiltro, Pagination paginacion)
        {

            IDataReader dr = null;            
            List<PValidacionesTicketCombustionDTO> lista = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                lista = new List<PValidacionesTicketCombustionDTO>();

                string[] aNombres = new string[15];
                DbType[] aTipos = new DbType[15];
                object[] aValores = new object[15];
                
                aNombres[0] = "@pTIPO_PETICION";
                aTipos[0] = DbType.String;
                aValores[0] = dtoFiltro.TipoPeticion;
                
                aNombres[1] = "@pID_TIPO_TICKET";
                aTipos[1] = DbType.Decimal;
                aValores[1] = dtoFiltro.IdTipoTicket;
                
                aNombres[2] = "@pNOMBRE_CAMPO";
                aTipos[2] = DbType.String;
                aValores[2] = dtoFiltro.NombreCampo;
                
                aNombres[3] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[3] = DbType.String;
                aValores[3] = dtoFiltro.NombreCampoRequest;
                
                aNombres[4] = "@pORDEN";
                aTipos[4] = DbType.Decimal;
                aValores[4] = dtoFiltro.Orden;
                
                aNombres[5] = "@pACTIVO";
                aTipos[5] = DbType.Boolean;
                aValores[5] = dtoFiltro.Activo;
                
                aNombres[6] = "@pOBLIGATORIO";
                aTipos[6] = DbType.Boolean;
                aValores[6] = dtoFiltro.Obligatorio;
                
                aNombres[7] = "@pDEPENDECIA";
                aTipos[7] = DbType.String;
                aValores[7] = dtoFiltro.Dependecia;
                
                aNombres[8] = "@pVALOR_MINIMO";
                aTipos[8] = DbType.String;
                aValores[8] = dtoFiltro.ValorMinimo;
                
                aNombres[9] = "@pVALOR_MAXIMO";
                aTipos[9] = DbType.String;
                aValores[9] = dtoFiltro.ValorMaximo;
                
                aNombres[10] = "@pANOMALIA";
                aTipos[10] = DbType.String;
                aValores[10] = dtoFiltro.Anomalia;

                aNombres[11] = "@pPRIORIDAD";
                aTipos[11] = DbType.Decimal;
                aValores[11] = dtoFiltro.Prioridad;

                aNombres[12] = "@pPAGE_INDEX";
                aTipos[12] = DbType.Int32;
                aValores[12] = paginacion.PaginaActual;
                
                aNombres[13] = "@pSORT_FIELD";
                aTipos[13] = DbType.String;
                aValores[13] = paginacion.CampoOrden;
                
                aNombres[14] = "@pSORT_ORDER";
                aTipos[14] = DbType.String;
                aValores[14] = paginacion.DireccionOrden;

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPValidacionesTicketCombustionFind", aNombres, aTipos, aValores);

                // Recuperamos la lista de objetos encontrados.
                while (dr.Read())
                {
                    lista.Add(ObtenerPValidacionesTicketCombustionDTO(dr));
                }
                return lista;
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004"); 
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }            
        }


        /// <summary>
        /// Obtiene los el número de registros que cumple con la el criterio de búsqueda y no está de baja
        /// </summary>
        /// <param name="dtoFiltro">Filtro de PValidacionesTicketCombustion a aplicar</param>
        /// <returns>PValidacionesTicketCombustionEntero con el número de registros.</returns>
        public int BuscarNumReg(PValidacionesTicketCombustionDTO dtoFiltro)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[12];
                DbType[] aTipos = new DbType[12];
                object[] aValores = new object[12];
                
                aNombres[0] = "@pTIPO_PETICION";
                aTipos[0] = DbType.String;
                aValores[0] = dtoFiltro.TipoPeticion;
                
                aNombres[1] = "@pID_TIPO_TICKET";
                aTipos[1] = DbType.Decimal;
                aValores[1] = dtoFiltro.IdTipoTicket;
                
                aNombres[2] = "@pNOMBRE_CAMPO";
                aTipos[2] = DbType.String;
                aValores[2] = dtoFiltro.NombreCampo;
                
                aNombres[3] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[3] = DbType.String;
                aValores[3] = dtoFiltro.NombreCampoRequest;
                
                aNombres[4] = "@pORDEN";
                aTipos[4] = DbType.Decimal;
                aValores[4] = dtoFiltro.Orden;
                
                aNombres[5] = "@pACTIVO";
                aTipos[5] = DbType.Boolean;
                aValores[5] = dtoFiltro.Activo;
                
                aNombres[6] = "@pOBLIGATORIO";
                aTipos[6] = DbType.Boolean;
                aValores[6] = dtoFiltro.Obligatorio;
                
                aNombres[7] = "@pDEPENDECIA";
                aTipos[7] = DbType.String;
                aValores[7] = dtoFiltro.Dependecia;
                
                aNombres[8] = "@pVALOR_MINIMO";
                aTipos[8] = DbType.String;
                aValores[8] = dtoFiltro.ValorMinimo;
                
                aNombres[9] = "@pVALOR_MAXIMO";
                aTipos[9] = DbType.String;
                aValores[9] = dtoFiltro.ValorMaximo;
                
                aNombres[10] = "@pANOMALIA";
                aTipos[10] = DbType.String;
                aValores[10] = dtoFiltro.Anomalia;

                aNombres[11] = "@pPRIORIDAD";
                aTipos[11] = DbType.Decimal;
                aValores[11] = dtoFiltro.Prioridad;

                // Hacemos la llamada a la base de datos y retornamos el resultado
                return (int) db.RunProcEscalar("spSMGPValidacionesTicketCombustionFindNumReg", aNombres, aTipos, aValores);
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004"); 
            }
        }

        /// <summary>
        /// Carga los datos del IDataReader en un objeto PValidacionesTicketCombustionDTO
        /// </summary>
        /// <param name="dr">DataReader con los datos obtenidos de la BBDD</param>
        /// <returns>PValidacionesTicketCombustionDTO con los datos cargados</returns>
        private PValidacionesTicketCombustionDTO ObtenerPValidacionesTicketCombustionDTO(IDataReader dr)
        {
            PValidacionesTicketCombustionDTO dto = new PValidacionesTicketCombustionDTO();
            if (DataBaseUtils.HasColumn(dr, "ID_VALIDACION"))
            {
				dto.IdValidacion = (decimal)DataBaseUtils.GetDataReaderColumnValue(dr, "ID_VALIDACION");
            }         
			if (DataBaseUtils.HasColumn(dr, "TIPO_PETICION"))
            {
				dto.TipoPeticion = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "TIPO_PETICION");
            }         
			if (DataBaseUtils.HasColumn(dr, "ID_TIPO_TICKET"))
            {
				dto.IdTipoTicket = (decimal)DataBaseUtils.GetDataReaderColumnValue(dr, "ID_TIPO_TICKET");
            }         
			if (DataBaseUtils.HasColumn(dr, "NOMBRE_CAMPO"))
            {
				dto.NombreCampo = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "NOMBRE_CAMPO");
            }         
			if (DataBaseUtils.HasColumn(dr, "NOMBRE_CAMPO_REQUEST"))
            {
				dto.NombreCampoRequest = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "NOMBRE_CAMPO_REQUEST");
            }         
			if (DataBaseUtils.HasColumn(dr, "ORDEN"))
            {
				dto.Orden = (decimal?)DataBaseUtils.GetDataReaderColumnValue(dr, "ORDEN");
            }         
			if (DataBaseUtils.HasColumn(dr, "ACTIVO"))
            {
				dto.Activo = (bool?)DataBaseUtils.GetDataReaderColumnValue(dr, "ACTIVO");
            }         
			if (DataBaseUtils.HasColumn(dr, "OBLIGATORIO"))
            {
				dto.Obligatorio = (bool?)DataBaseUtils.GetDataReaderColumnValue(dr, "OBLIGATORIO");
            }         
			if (DataBaseUtils.HasColumn(dr, "DEPENDECIA"))
            {
				dto.Dependecia = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "DEPENDECIA");
            }         
			if (DataBaseUtils.HasColumn(dr, "VALOR_MINIMO"))
            {
				dto.ValorMinimo = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "VALOR_MINIMO");
            }         
			if (DataBaseUtils.HasColumn(dr, "VALOR_MAXIMO"))
            {
				dto.ValorMaximo = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "VALOR_MAXIMO");
            }         
			if (DataBaseUtils.HasColumn(dr, "ANOMALIA"))
            {
				dto.Anomalia = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "ANOMALIA");
            }
            if (DataBaseUtils.HasColumn(dr, "PRIORIDAD"))
            {
                dto.Prioridad = (decimal?)DataBaseUtils.GetDataReaderColumnValue(dr, "PRIORIDAD");
            }

            return dto;
        }

    }
}