//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using Iberdrola.Commons.BaseClasses;
using Iberdrola.Commons.DataAccess;
using Iberdrola.Commons.Exceptions;
using Iberdrola.Commons.Messages;
using Iberdrola.SMG.DAL.DTO;

namespace Iberdrola.SMG.DAL.DB
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PMapeoEtiquetasDocumentosConCamposBbdd
    /// </summary>
    public partial class PMapeoEtiquetasDocumentosConCamposBbddDB
    {
      
        /// <summary>
        /// Obtiene todos PMapeoEtiquetasDocumentosConCamposBbddDTO que no estén de baja
        /// </summary>
        /// <returns>Lista de PMapeoEtiquetasDocumentosConCamposBbddDTO con todos los objetos</returns>
        public List<PMapeoEtiquetasDocumentosConCamposBbddDTO> ObtenerTodosByNombreProceso(string pNomProceso)
        {
            IDataReader dr = null;            
            List<PMapeoEtiquetasDocumentosConCamposBbddDTO> lista = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                lista = new List<PMapeoEtiquetasDocumentosConCamposBbddDTO>();

                string[] aNombres = new string[1];
                DbType[] aTipos = new DbType[1];
                object[] aValores = new object[1];

                aNombres[0] = "@pNOMBRE_PROCESO";
                aTipos[0] = DbType.String;
                aValores[0] = pNomProceso;
				
                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPMapeoEtiquetasDocumentosConCamposBbddGetAllNomProc", aNombres, aTipos, aValores);

                // Recuperamos la lista de objetos encontrados.
                while (dr.Read())
                {
                    lista.Add(ObtenerPMapeoEtiquetasDocumentosConCamposBbddDTO(dr));
                }
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }

            // retornamos la lista de objetos buscados, si no se ha encontrato nada se retorna null
            return lista;
        }       
 

    }
}