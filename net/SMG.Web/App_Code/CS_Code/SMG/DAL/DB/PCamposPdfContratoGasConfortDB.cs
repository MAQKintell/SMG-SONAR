//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using Iberdrola.Commons.BaseClasses;
using Iberdrola.Commons.DataAccess;
using Iberdrola.Commons.Exceptions;
using Iberdrola.Commons.Messages;
using Iberdrola.SMG.DAL.DTO;

namespace Iberdrola.SMG.DAL.DB
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PCamposPdfContratoGasConfort
    /// </summary>
    public partial class PCamposPdfContratoGasConfortDB
    {
        /// <summary>
        /// Obtiene el PCamposPdfContratoGasConfortDTO que cumple con la PK y no esté de baja
        /// </summary>
        /// <param name="idCampo"></param>
        /// <returns>PCamposPdfContratoGasConfortDTO que cumple con la PK, null si no lo encuentra.</returns>
        public PCamposPdfContratoGasConfortDTO Obtener(decimal idCampo)
        {
            IDataReader dr = null;
            PCamposPdfContratoGasConfortDTO dto = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[1];
                DbType[] aTipos = new DbType[1];
                object[] aValores = new object[1];
                
                aNombres[0] = "@pID_CAMPO";
                aTipos[0] = DbType.Decimal;
                aValores[0] = idCampo;
                
                

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPCamposPdfContratoGasConfortGet", aNombres, aTipos, aValores);
                
                // Rebuperamos el objeto buscado
                if (dr.Read())
                {
                    dto = ObtenerPCamposPdfContratoGasConfortDTO(dr);
                }
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {                
                throw new DALException(false, ex, "2004");
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }
            
            // retornamos el objeto buscado, si no se ha encontrato nada se retorna null
            return dto;
        }
        
        /// <summary>
        /// Obtiene todos PCamposPdfContratoGasConfortDTO que no estén de baja
        /// </summary>
        /// <returns>Lista de PCamposPdfContratoGasConfortDTO con todos los objetos</returns>
        public List<PCamposPdfContratoGasConfortDTO> ObtenerTodos()
        {
            IDataReader dr = null;            
            List<PCamposPdfContratoGasConfortDTO> lista = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                lista = new List<PCamposPdfContratoGasConfortDTO>();

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPCamposPdfContratoGasConfortGetAll", null, null, null);

                // Recuperamos la lista de objetos encontrados.
                while (dr.Read())
                {
                    lista.Add(ObtenerPCamposPdfContratoGasConfortDTO(dr));
                }
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }

            // retornamos la lista de objetos buscados, si no se ha encontrato nada se retorna null
            return lista;
        }
        
        /// <summary>
        /// Inserta el PCamposPdfContratoGasConfortDTO
        /// </summary>
        /// <param name="dto">Datos a guardar</param>
        /// <returns>PCamposPdfContratoGasConfortDTO con la clave autogenerada informada (si la tuviera)</returns>
        public PCamposPdfContratoGasConfortDTO Insertar(PCamposPdfContratoGasConfortDTO dto)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                
                string[] aNombres = new string[12];
                DbType[] aTipos = new DbType[12];
                object[] aValores = new object[12];
                
                aNombres[0] = "@pORIGEN_CAMPO";
                aTipos[0] = DbType.String;
                aValores[0] = dto.OrigenCampo;
                
                aNombres[1] = "@pNOMBRE_CAMPO";
                aTipos[1] = DbType.String;
                aValores[1] = dto.NombreCampo;
                
                aNombres[2] = "@pACTIVO";
                aTipos[2] = DbType.Boolean;
                aValores[2] = dto.Activo;
                
                aNombres[3] = "@pTIPO_DATO";
                aTipos[3] = DbType.String;
                aValores[3] = dto.TipoDato;
                
                aNombres[4] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[4] = DbType.String;
                aValores[4] = dto.NombreCampoRequest;
                
                aNombres[5] = "@pNOMBRE_CAMPO_PDF";
                aTipos[5] = DbType.String;
                aValores[5] = dto.NombreCampoPdf;
                
                aNombres[6] = "@pORDEN_PINTAR";
                aTipos[6] = DbType.Decimal;
                aValores[6] = dto.OrdenPintar;
                
                aNombres[7] = "@pFORMATO_CAMPO_PDF";
                aTipos[7] = DbType.String;
                aValores[7] = dto.FormatoCampoPdf;
                
                aNombres[8] = "@pID_MODELO";
                aTipos[8] = DbType.Decimal;
                aValores[8] = dto.IdModelo;
                
                aNombres[9] = "@pTIPO_LETRA";
                aTipos[9] = DbType.String;
                aValores[9] = dto.TipoLetra;
                
                aNombres[10] = "@pTAMANYO_LETRA";
                aTipos[10] = DbType.Decimal;
                aValores[10] = dto.TamanyoLetra;
                
                aNombres[11] = "@pCOLOR_LETRA";
                aTipos[11] = DbType.String;
                aValores[11] = dto.ColorLetra;
                
                

                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGPCamposPdfContratoGasConfortInsert", aNombres, aTipos, aValores);
                dto.IdCampo = (decimal)result;

            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2005");
            }
            return dto;
        }
                
        /// <summary>
        /// Actualiza el PCamposPdfContratoGasConfortDTO
        /// </summary>
        /// <param name="dto">Datos a actualizar</param>
        /// <returns>int con el número de filas actualizadas</returns>
        public int Actualizar(PCamposPdfContratoGasConfortDTO dto)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                
                string[] aNombres = new string[13];
                DbType[] aTipos = new DbType[13];
                object[] aValores = new object[13];
                
                aNombres[0] = "@pID_CAMPO";
                aTipos[0] = DbType.Decimal;
                aValores[0] = dto.IdCampo;
                
                aNombres[1] = "@pORIGEN_CAMPO";
                aTipos[1] = DbType.String;
                aValores[1] = dto.OrigenCampo;
                
                aNombres[2] = "@pNOMBRE_CAMPO";
                aTipos[2] = DbType.String;
                aValores[2] = dto.NombreCampo;
                
                aNombres[3] = "@pACTIVO";
                aTipos[3] = DbType.Boolean;
                aValores[3] = dto.Activo;
                
                aNombres[4] = "@pTIPO_DATO";
                aTipos[4] = DbType.String;
                aValores[4] = dto.TipoDato;
                
                aNombres[5] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[5] = DbType.String;
                aValores[5] = dto.NombreCampoRequest;
                
                aNombres[6] = "@pNOMBRE_CAMPO_PDF";
                aTipos[6] = DbType.String;
                aValores[6] = dto.NombreCampoPdf;
                
                aNombres[7] = "@pORDEN_PINTAR";
                aTipos[7] = DbType.Decimal;
                aValores[7] = dto.OrdenPintar;
                
                aNombres[8] = "@pFORMATO_CAMPO_PDF";
                aTipos[8] = DbType.String;
                aValores[8] = dto.FormatoCampoPdf;
                
                aNombres[9] = "@pID_MODELO";
                aTipos[9] = DbType.Decimal;
                aValores[9] = dto.IdModelo;
                
                aNombres[10] = "@pTIPO_LETRA";
                aTipos[10] = DbType.String;
                aValores[10] = dto.TipoLetra;
                
                aNombres[11] = "@pTAMANYO_LETRA";
                aTipos[11] = DbType.Decimal;
                aValores[11] = dto.TamanyoLetra;
                
                aNombres[12] = "@pCOLOR_LETRA";
                aTipos[12] = DbType.String;
                aValores[12] = dto.ColorLetra;
                
                

                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGPCamposPdfContratoGasConfortUpdate", aNombres, aTipos, aValores);
                
                // Retornamos el número de filas afectadas.
                return (int) result;
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2005");
            }
        }
        
        /// <summary>
        /// Elimina el PCamposPdfContratoGasConfortDTO. si el objeto tiene un campo de fecha baja
        /// para hacer bajas lógicas realiza un borrado lógico
        /// </summary>
        /// <param name="idCampo"></param>
        /// <returns>int con el número de filas eliminadas</returns>
        public int Eliminar(decimal idCampo)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[1];
                DbType[] aTipos = new DbType[1];
                object[] aValores = new object[1];
                
                aNombres[0] = "@pID_CAMPO";
                aTipos[0] = DbType.Decimal;
                aValores[0] = idCampo;
                
                

                // Hacemos la llamada a la base de datos
                object result = db.RunProcEscalar("spSMGPCamposPdfContratoGasConfortDelete", aNombres, aTipos, aValores);

                // Retornamos el número de filas afectadas.
                return (int) result;
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
        }

        /// <summary>
        /// Obtiene los PCamposPdfContratoGasConfortDTO que cumple con la el criterio de búsqueda y no está de baja
        /// </summary>
        /// <param name="dtoFiltro">Filtro de PCamposPdfContratoGasConfort a aplicar</param>
        /// <param name="paginacion">Datos de la paginación</param>
        /// <returns>Lista de PCamposPdfContratoGasConfortDTO que cumplen con los filtros indicados.</returns>
        public List<PCamposPdfContratoGasConfortDTO> Buscar(PCamposPdfContratoGasConfortDTO dtoFiltro, Pagination paginacion)
        {

            IDataReader dr = null;            
            List<PCamposPdfContratoGasConfortDTO> lista = null;
            
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);
                lista = new List<PCamposPdfContratoGasConfortDTO>();

                string[] aNombres = new string[15];
                DbType[] aTipos = new DbType[15];
                object[] aValores = new object[15];
                
                aNombres[0] = "@pORIGEN_CAMPO";
                aTipos[0] = DbType.String;
                aValores[0] = dtoFiltro.OrigenCampo;
                
                aNombres[1] = "@pNOMBRE_CAMPO";
                aTipos[1] = DbType.String;
                aValores[1] = dtoFiltro.NombreCampo;
                
                aNombres[2] = "@pACTIVO";
                aTipos[2] = DbType.Boolean;
                aValores[2] = dtoFiltro.Activo;
                
                aNombres[3] = "@pTIPO_DATO";
                aTipos[3] = DbType.String;
                aValores[3] = dtoFiltro.TipoDato;
                
                aNombres[4] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[4] = DbType.String;
                aValores[4] = dtoFiltro.NombreCampoRequest;
                
                aNombres[5] = "@pNOMBRE_CAMPO_PDF";
                aTipos[5] = DbType.String;
                aValores[5] = dtoFiltro.NombreCampoPdf;
                
                aNombres[6] = "@pORDEN_PINTAR";
                aTipos[6] = DbType.Decimal;
                aValores[6] = dtoFiltro.OrdenPintar;
                
                aNombres[7] = "@pFORMATO_CAMPO_PDF";
                aTipos[7] = DbType.String;
                aValores[7] = dtoFiltro.FormatoCampoPdf;
                
                aNombres[8] = "@pID_MODELO";
                aTipos[8] = DbType.Decimal;
                aValores[8] = dtoFiltro.IdModelo;
                
                aNombres[9] = "@pTIPO_LETRA";
                aTipos[9] = DbType.String;
                aValores[9] = dtoFiltro.TipoLetra;
                
                aNombres[10] = "@pTAMANYO_LETRA";
                aTipos[10] = DbType.Decimal;
                aValores[10] = dtoFiltro.TamanyoLetra;
                
                aNombres[11] = "@pCOLOR_LETRA";
                aTipos[11] = DbType.String;
                aValores[11] = dtoFiltro.ColorLetra;
                
                aNombres[12] = "@pPAGE_INDEX";
                aTipos[12] = DbType.Int32;
                aValores[12] = paginacion.PaginaActual;
                
                aNombres[13] = "@pSORT_FIELD";
                aTipos[13] = DbType.String;
                aValores[13] = paginacion.CampoOrden;
                
                aNombres[14] = "@pSORT_ORDER";
                aTipos[14] = DbType.String;
                aValores[14] = paginacion.DireccionOrden;
                
                

                // Hacemos la llamada a la base de datos
                dr = db.RunProcDataReader("spSMGPCamposPdfContratoGasConfortFind", aNombres, aTipos, aValores);

                // Recuperamos la lista de objetos encontrados.
                while (dr.Read())
                {
                    lista.Add(ObtenerPCamposPdfContratoGasConfortDTO(dr));
                }
                return lista;
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }            
        }


        /// <summary>
        /// Obtiene los el número de registros que cumple con la el criterio de búsqueda y no está de baja
        /// </summary>
        /// <param name="dtoFiltro">Filtro de PCamposPdfContratoGasConfort a aplicar</param>
        /// <returns>PCamposPdfContratoGasConfortEntero con el número de registros.</returns>
        public int BuscarNumReg(PCamposPdfContratoGasConfortDTO dtoFiltro)
        {
            try
            {
                DataBaseLibrary db = new DataBaseLibrary(BaseDB.SMG_DB);

                string[] aNombres = new string[12];
                DbType[] aTipos = new DbType[12];
                object[] aValores = new object[12];
                
                aNombres[0] = "@pORIGEN_CAMPO";
                aTipos[0] = DbType.String;
                aValores[0] = dtoFiltro.OrigenCampo;
                
                aNombres[1] = "@pNOMBRE_CAMPO";
                aTipos[1] = DbType.String;
                aValores[1] = dtoFiltro.NombreCampo;
                
                aNombres[2] = "@pACTIVO";
                aTipos[2] = DbType.Boolean;
                aValores[2] = dtoFiltro.Activo;
                
                aNombres[3] = "@pTIPO_DATO";
                aTipos[3] = DbType.String;
                aValores[3] = dtoFiltro.TipoDato;
                
                aNombres[4] = "@pNOMBRE_CAMPO_REQUEST";
                aTipos[4] = DbType.String;
                aValores[4] = dtoFiltro.NombreCampoRequest;
                
                aNombres[5] = "@pNOMBRE_CAMPO_PDF";
                aTipos[5] = DbType.String;
                aValores[5] = dtoFiltro.NombreCampoPdf;
                
                aNombres[6] = "@pORDEN_PINTAR";
                aTipos[6] = DbType.Decimal;
                aValores[6] = dtoFiltro.OrdenPintar;
                
                aNombres[7] = "@pFORMATO_CAMPO_PDF";
                aTipos[7] = DbType.String;
                aValores[7] = dtoFiltro.FormatoCampoPdf;
                
                aNombres[8] = "@pID_MODELO";
                aTipos[8] = DbType.Decimal;
                aValores[8] = dtoFiltro.IdModelo;
                
                aNombres[9] = "@pTIPO_LETRA";
                aTipos[9] = DbType.String;
                aValores[9] = dtoFiltro.TipoLetra;
                
                aNombres[10] = "@pTAMANYO_LETRA";
                aTipos[10] = DbType.Decimal;
                aValores[10] = dtoFiltro.TamanyoLetra;
                
                aNombres[11] = "@pCOLOR_LETRA";
                aTipos[11] = DbType.String;
                aValores[11] = dtoFiltro.ColorLetra;
                
                

                // Hacemos la llamada a la base de datos y retornamos el resultado
                return (int) db.RunProcEscalar("spSMGPCamposPdfContratoGasConfortFindNumReg", aNombres, aTipos, aValores);
            }
            catch (BaseException)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new DALException(false, ex, "2004");
            }
        }

        /// <summary>
        /// Carga los datos del IDataReader en un objeto PCamposPdfContratoGasConfortDTO
        /// </summary>
        /// <param name="dr">DataReader con los datos obtenidos de la BBDD</param>
        /// <returns>PCamposPdfContratoGasConfortDTO con los datos cargados</returns>
        private PCamposPdfContratoGasConfortDTO ObtenerPCamposPdfContratoGasConfortDTO(IDataReader dr)
        {
            PCamposPdfContratoGasConfortDTO dto = new PCamposPdfContratoGasConfortDTO();
            if (DataBaseUtils.HasColumn(dr, "ID_CAMPO"))
            {
				dto.IdCampo = (decimal)DataBaseUtils.GetDataReaderColumnValue(dr, "ID_CAMPO");
            }         
			if (DataBaseUtils.HasColumn(dr, "ORIGEN_CAMPO"))
            {
				dto.OrigenCampo = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "ORIGEN_CAMPO");
            }         
			if (DataBaseUtils.HasColumn(dr, "NOMBRE_CAMPO"))
            {
				dto.NombreCampo = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "NOMBRE_CAMPO");
            }         
			if (DataBaseUtils.HasColumn(dr, "ACTIVO"))
            {
				dto.Activo = (bool?)DataBaseUtils.GetDataReaderColumnValue(dr, "ACTIVO");
            }         
			if (DataBaseUtils.HasColumn(dr, "TIPO_DATO"))
            {
				dto.TipoDato = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "TIPO_DATO");
            }         
			if (DataBaseUtils.HasColumn(dr, "NOMBRE_CAMPO_REQUEST"))
            {
				dto.NombreCampoRequest = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "NOMBRE_CAMPO_REQUEST");
            }         
			if (DataBaseUtils.HasColumn(dr, "NOMBRE_CAMPO_PDF"))
            {
				dto.NombreCampoPdf = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "NOMBRE_CAMPO_PDF");
            }         
			if (DataBaseUtils.HasColumn(dr, "ORDEN_PINTAR"))
            {
				dto.OrdenPintar = (decimal?)DataBaseUtils.GetDataReaderColumnValue(dr, "ORDEN_PINTAR");
            }         
			if (DataBaseUtils.HasColumn(dr, "FORMATO_CAMPO_PDF"))
            {
				dto.FormatoCampoPdf = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "FORMATO_CAMPO_PDF");
            }         
			if (DataBaseUtils.HasColumn(dr, "ID_MODELO"))
            {
				dto.IdModelo = (decimal?)DataBaseUtils.GetDataReaderColumnValue(dr, "ID_MODELO");
            }         
			if (DataBaseUtils.HasColumn(dr, "TIPO_LETRA"))
            {
				dto.TipoLetra = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "TIPO_LETRA");
            }         
			if (DataBaseUtils.HasColumn(dr, "TAMANYO_LETRA"))
            {
				dto.TamanyoLetra = (decimal?)DataBaseUtils.GetDataReaderColumnValue(dr, "TAMANYO_LETRA");
            }         
			if (DataBaseUtils.HasColumn(dr, "COLOR_LETRA"))
            {
				dto.ColorLetra = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "COLOR_LETRA");
            }
            if (DataBaseUtils.HasColumn(dr, "VALOR_CAMPO_PDF"))
            {
                dto.ValorCampoPDF = (string)DataBaseUtils.GetDataReaderColumnValue(dr, "VALOR_CAMPO_PDF");
            }

            return dto;
        }

    }
}