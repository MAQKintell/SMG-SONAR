//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using Iberdrola.Commons.DataAccess;
using Iberdrola.SMG.DAL.DTO;
using Iberdrola.SMG.DAL.DB;
using System.Data;
using System.Text;

namespace Iberdrola.SMG.BLL
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PMapeoEtiquetasDocumentosConCamposBbdd
    /// </summary>
    public partial class PMapeoEtiquetasDocumentosConCamposBbdd
    {

        private static string DevolverDireccionCompleta(DataTable datosMantenimiento)
        {
            string tipViaPublic = datosMantenimiento.Rows[0]["TIP_VIA_PUBLICA"].ToString();
            string nomCalle = datosMantenimiento.Rows[0]["NOM_CALLE"].ToString();
            string codPortal = datosMantenimiento.Rows[0]["COD_PORTAL"].ToString();
            string tipBis = datosMantenimiento.Rows[0]["TIP_BIS"].ToString();
            string tipEscalera = datosMantenimiento.Rows[0]["TIP_ESCALERA"].ToString();
            string tipPiso = datosMantenimiento.Rows[0]["TIP_PISO"].ToString();
            string tipMano = datosMantenimiento.Rows[0]["TIP_MANO"].ToString();
            string codPostal = datosMantenimiento.Rows[0]["COD_POSTAL"].ToString();
            string poblacion = datosMantenimiento.Rows[0]["COD_POBLACION"].ToString();
            string provincia = datosMantenimiento.Rows[0]["COD_PROVINCIA"].ToString();

            string direcSuministro = tipViaPublic + " " + nomCalle + " " + codPortal +
                (string.IsNullOrEmpty(tipBis.Trim()) ? "" : ", " + tipBis) +
                (string.IsNullOrEmpty(tipEscalera.Trim()) ? "" : ", " + tipEscalera) +
                (string.IsNullOrEmpty(tipPiso.Trim()) ? "" : ", " + tipPiso) +
                (string.IsNullOrEmpty(tipMano.Trim()) ? "" : " " + tipMano) +
                (string.IsNullOrEmpty(codPostal.Trim()) ? "" : ", " + codPostal) +
                (string.IsNullOrEmpty(poblacion.Trim()) ? "" : ", " + poblacion) +
                (string.IsNullOrEmpty(provincia.Trim()) ? "" : ", " + provincia);

            return direcSuministro;
        }
        /// <summary>
        /// Obtiene todos PMapeoEtiquetasDocumentosConCamposBbddDTO que no estén de baja
        /// </summary>
        /// <returns>Lista de PMapeoEtiquetasDocumentosConCamposBbddDTO con todos los objetos</returns>
        public static List<PMapeoEtiquetasDocumentosConCamposBbddDTO> ObtenerTodosByNombreProceso(string pNomProceso)
        {
            PMapeoEtiquetasDocumentosConCamposBbddDB db = new PMapeoEtiquetasDocumentosConCamposBbddDB();
            return db.ObtenerTodosByNombreProceso(pNomProceso);
        }
        
        private static string SustituirEtiquetasMultiples(DataTable dtDatos, PMapeoEtiquetasDocumentosConCamposBbddDTO pMapeoEtiquetasDocumentosConCamposBbddDTO)
        {
            StringBuilder sbCadena = new StringBuilder();
            string valorEtiqueta = string.Empty;

            sbCadena.Append(pMapeoEtiquetasDocumentosConCamposBbddDTO.FormatoEtiquetaSustituir);
            string[] lNombreCampos = pMapeoEtiquetasDocumentosConCamposBbddDTO.NombreCampo.Split(';');

            foreach (string subNombreCampo in lNombreCampos)
            {
                string etiqValor = dtDatos.Rows[0][subNombreCampo].ToString();
                string etiq = "[" + subNombreCampo + "]";
                sbCadena.Replace(etiq, etiqValor);
            }

            valorEtiqueta = sbCadena.ToString();

            return valorEtiqueta;
        }

        public static List<PValidacionesTicketCombustion.Dato> ObtenerDatosParaEtiquetas(string pNomProceso, string codContrato, decimal? idSolicitud, int? codVisita, string proveedor)
        {
            Visitas visitas = new Visitas();
            CaracteristicaHistorico caracteristicaHistorico = new CaracteristicaHistorico();
            TicketCombustion ticketCombustion = new TicketCombustion();
            SolicitudesDB objSolicitudesDB = new SolicitudesDB();

            List<PMapeoEtiquetasDocumentosConCamposBbddDTO> lPMapeoEtiquetasDocumentosConCamposBbddDTO = new List<PMapeoEtiquetasDocumentosConCamposBbddDTO>();
            List <PValidacionesTicketCombustion.Dato> datos = new List<PValidacionesTicketCombustion.Dato>();

            IDataReader idrDatosMantenimiento = null;
            DataTable dtDatosMantenimiento = new DataTable();
            DataTable dtDatosCaldera = null;
            DataTable dtDatosVisita = null;
            DataTable dtDatosTicket = null;
            DataTable dtDatosSolicitud = null;

            StringBuilder sbCadena = new StringBuilder();

            //Obtenemos todos los campos a obtner sus datos para posteriormente ser sustituidos en las etiquetas.
            lPMapeoEtiquetasDocumentosConCamposBbddDTO = ObtenerTodosByNombreProceso(pNomProceso);

            if (lPMapeoEtiquetasDocumentosConCamposBbddDTO.Count > 0)
            {
                foreach (PMapeoEtiquetasDocumentosConCamposBbddDTO pMapeoEtiquetasDocumentosConCamposBbddDTO in lPMapeoEtiquetasDocumentosConCamposBbddDTO)
                {
                    string nombreCampo = pMapeoEtiquetasDocumentosConCamposBbddDTO.NombreCampo;
                    string nombreEtiqueta = pMapeoEtiquetasDocumentosConCamposBbddDTO.NombreEtiquetaSustituir;
                    string valorEtiqueta = string.Empty;

                    switch (pMapeoEtiquetasDocumentosConCamposBbddDTO.TablaOrigenCampo)
                    {
                        case "TABLA_MANTENIMIENTO":
                            if (idrDatosMantenimiento == null)
                            {
                                idrDatosMantenimiento = Mantenimiento.ObtenerDatosMantenimientoPorcontrato(codContrato);
                                dtDatosMantenimiento.Load(idrDatosMantenimiento);
                            }

                            if (dtDatosMantenimiento != null && dtDatosMantenimiento.Rows.Count > 0)
                            {
                                if (nombreCampo == "CONSTRUIR_DIRECCION_SUMINISTRO")
                                    valorEtiqueta = DevolverDireccionCompleta(dtDatosMantenimiento);
                                else
                                    //Si el registro a procesar tiene multiples campos los procesamos de otra manera.
                                    if (nombreCampo.Split(';').Length > 1 && !string.IsNullOrEmpty(pMapeoEtiquetasDocumentosConCamposBbddDTO.FormatoEtiquetaSustituir))
                                        valorEtiqueta = SustituirEtiquetasMultiples(dtDatosMantenimiento, pMapeoEtiquetasDocumentosConCamposBbddDTO);
                                    else
                                        valorEtiqueta = dtDatosMantenimiento.Rows[0][nombreCampo].ToString();
                            }

                            break;
                        case "TABLA_CALDERA":

                            if (dtDatosCaldera == null)
                                dtDatosCaldera = Calderas.dtObtenerCaldera(codContrato);

                            if (dtDatosCaldera != null && dtDatosCaldera.Rows.Count > 0)
                                //Si el registro a procesar tiene multiples campos los procesamos de otra manera.
                                if (nombreCampo.Split(';').Length > 1 && !string.IsNullOrEmpty(pMapeoEtiquetasDocumentosConCamposBbddDTO.FormatoEtiquetaSustituir))
                                    valorEtiqueta = SustituirEtiquetasMultiples(dtDatosCaldera, pMapeoEtiquetasDocumentosConCamposBbddDTO);
                                else
                                    valorEtiqueta = dtDatosCaldera.Rows[0][nombreCampo].ToString();

                            break;
                        case "TABLA_CARACTERISTICAS":

                            if (idSolicitud != null && idSolicitud > 0)
                                valorEtiqueta = CaracteristicaHistorico.GetCaracteristicaValor((int)idSolicitud, nombreCampo);

                            break;
                        case "TABLA_VISITA":

                            if (dtDatosVisita == null)
                                dtDatosVisita = visitas.dtDatosVisitas(codContrato, codVisita.ToString(), proveedor);

                            if (dtDatosVisita != null && dtDatosVisita.Rows.Count > 0)
                                //Si el registro a procesar tiene multiples campos los procesamos de otra manera.
                                if (nombreCampo.Split(';').Length > 1 && !string.IsNullOrEmpty(pMapeoEtiquetasDocumentosConCamposBbddDTO.FormatoEtiquetaSustituir))
                                    valorEtiqueta = SustituirEtiquetasMultiples(dtDatosVisita, pMapeoEtiquetasDocumentosConCamposBbddDTO);
                                else
                                    valorEtiqueta = dtDatosVisita.Rows[0][nombreCampo].ToString();

                            break;
                        case "TABLA_TICKET_COMBUSTION":

                            if (dtDatosTicket == null)
                                dtDatosTicket = TicketCombustion.dtObtenerPorCodContratoYCodvisitaOIdSolicitud(codContrato, idSolicitud, codVisita);

                            if (dtDatosTicket != null && dtDatosTicket.Rows.Count > 0)
                                //Si el registro a procesar tiene multiples campos los procesamos de otra manera.
                                if (nombreCampo.Split(';').Length > 1 && !string.IsNullOrEmpty(pMapeoEtiquetasDocumentosConCamposBbddDTO.FormatoEtiquetaSustituir))
                                    valorEtiqueta = SustituirEtiquetasMultiples(dtDatosTicket, pMapeoEtiquetasDocumentosConCamposBbddDTO);
                                else
                                    valorEtiqueta = dtDatosTicket.Rows[0][nombreCampo].ToString();

                            break;
                        case "TABLA_SOLICITUDES":

                            //Recuperamos la informacion de la solicitud
                            if (dtDatosSolicitud == null && (idSolicitud != null && idSolicitud > 0))
                                dtDatosSolicitud = objSolicitudesDB.GetSolicitudesPorIDSolicitud(idSolicitud.ToString(), 1).Tables[0];

                            if (dtDatosSolicitud != null && dtDatosSolicitud.Rows.Count > 0)
                                //Si el registro a procesar tiene multiples campos los procesamos de otra manera.
                                if (nombreCampo.Split(';').Length > 1 && !string.IsNullOrEmpty(pMapeoEtiquetasDocumentosConCamposBbddDTO.FormatoEtiquetaSustituir))
                                    valorEtiqueta = SustituirEtiquetasMultiples(dtDatosSolicitud, pMapeoEtiquetasDocumentosConCamposBbddDTO);
                                else
                                    valorEtiqueta = dtDatosSolicitud.Rows[0][nombreCampo].ToString();

                            break;
                            //default:
                            //    Console.WriteLine("Default case");
                            //    break;
                    }

                    //Guadamos el valor con su nombre de etiqueta correspondiente a sustituir.
                    datos.Add(new PValidacionesTicketCombustion.Dato("#" + nombreEtiqueta + "#", valorEtiqueta));
                }
            }


            return datos;
        }
    }
}