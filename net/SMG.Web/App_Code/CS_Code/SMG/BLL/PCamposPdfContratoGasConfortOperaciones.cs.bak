//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using Iberdrola.Commons.DataAccess;
using Iberdrola.SMG.DAL.DTO;
using Iberdrola.SMG.DAL.DB;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System;
using System.IO;
using System.Web.UI;

namespace Iberdrola.SMG.BLL
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PCamposPdfContratoGasConfort
    /// </summary>
    public partial class PCamposPdfContratoGasConfort
    {

        #region Private Methods

        /// <summary>
        /// Obtiene todos PCamposPdfContratoGasConfortDTO que no estén de baja
        /// </summary>
        /// <returns>Lista de PCamposPdfContratoGasConfortDTO con todos los objetos</returns>
        private static List<PCamposPdfContratoGasConfortDTO> ObtenerDatosContratoGasConfort(string pCodContrato, decimal pIdSolicitud)
        {
            PCamposPdfContratoGasConfortDB db = new PCamposPdfContratoGasConfortDB();
            return db.ObtenerDatosContratoGasConfort(pCodContrato, pIdSolicitud);
        }

        private static string GenerarBarCode128Image(string sCCBB, string sPath)
        {
            using (ManejadorFicheros.GetImpersonator())
            {
                Barcode128 code128 = new Barcode128();
                code128.CodeType = Barcode.CODE128;
                code128.ChecksumText = true;
                code128.GenerateChecksum = true;
                code128.StartStopText = true;
                code128.Code = "*" + sCCBB + "*";
                System.Drawing.Bitmap bm = new System.Drawing.Bitmap(code128.CreateDrawingImage(System.Drawing.Color.Black, System.Drawing.Color.White));
                string rutaCCBB = sPath + sCCBB + ".jpg";
                bm.Save(rutaCCBB, System.Drawing.Imaging.ImageFormat.Jpeg);
                bm.Dispose();
                GC.Collect();
                GC.WaitForPendingFinalizers();

                return rutaCCBB;
            }
        }

        private static void DarFormatoCampoPDF(AcroFields pdfFormFields, string nombreCampo)
        {
            pdfFormFields.SetFieldProperty(nombreCampo, "textSize", (float)9, null);
            pdfFormFields.SetFieldProperty(nombreCampo, "textColor", iTextSharp.text.BaseColor.DARK_GRAY, null);
            string fontName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Calibri.ttf");
            BaseFont bf = BaseFont.CreateFont(fontName, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
            pdfFormFields.SetFieldProperty(nombreCampo, "textFont", bf, null);
            pdfFormFields.RegenerateField(nombreCampo);
        }

        private static string RellenarPDF(List<PCamposPdfContratoGasConfortDTO> lPCamposPdfContratoGasConfortDTO)
        {
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            AcroFields pdfFormFields = null;
            PCamposPdfContratoGasConfortDTO pNombreFichero = null;
            string nombreFichero = "";
            string pathOrigen = "";
            string pathDestino = "";
            try
            {
                using (ManejadorFicheros.GetImpersonator())
                {
                    ConfiguracionDTO rutaOrigen = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.RUTA_PLANTILLA_CONTRATO_GAS_CONFORT);
                    //20210120 BGN MOD BEG R#28584 - Envío Contrato GC a Edatalia para Firma Digital
                    //ConfiguracionDTO rutaDestino = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.RUTA_DESTINO_CONTRATOS_GENERADOS_GAS_CONFORT);
                    ConfiguracionDTO rutaDestino = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.RUTA_FICHEROS_EDATALIA);
                    //20210120 BGN MOD END R#28584 - Envío Contrato GC a Edatalia para Firma Digital

                    if (rutaOrigen == null)
                    {
                        //Pdte. sacar mensaje por pantalla
                    }

                    if (rutaDestino == null)
                    {
                        //Pdte. sacar mensaje por pantalla
                    }

                    pathOrigen = rutaOrigen.Valor;
                    pathDestino = rutaDestino.Valor;

                    pNombreFichero = lPCamposPdfContratoGasConfortDTO.Find(x => x.NombreCampo == "NOMBRE_FICHERO");

                    if (pNombreFichero == null)
                    {
                        throw new Exception("Error RellenarPDF. PCamposPdfContratoGasConfortDTO pNombreFichero = null.");
                    }

                    string nombrePlantilla = "Plantilla_ContratoGC.pdf";
                    //string nombreFichero = "ContratoGC" + DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    nombreFichero = pNombreFichero.ValorCampoPDF;

                    pdfReader = new PdfReader(pathOrigen + nombrePlantilla);
                    pdfStamper = new PdfStamper(pdfReader, new FileStream(pathDestino + nombreFichero, FileMode.Create));
                    pdfFormFields = pdfStamper.AcroFields;
                }
            
                string rutaCCBBGenerado = "";
                var pdfContentByte = pdfStamper.GetOverContent(1);
                using (ManejadorFicheros.GetImpersonator())
                {
                    foreach (PCamposPdfContratoGasConfortDTO pCamposPdfContratoGasConfortDTO in lPCamposPdfContratoGasConfortDTO)
                    {
                        string nombreCampoPDF = pCamposPdfContratoGasConfortDTO.NombreCampoPdf;
                        string valorCampoPDF = pCamposPdfContratoGasConfortDTO.ValorCampoPDF;

                        if (!string.IsNullOrEmpty(nombreCampoPDF))
                        {
                            if (!string.IsNullOrEmpty(valorCampoPDF))
                            {
                                //Generamos la imagen del codigo de barras.
                                if (nombreCampoPDF == "NumeroCodigoBarras")
                                {
                                    rutaCCBBGenerado = GenerarBarCode128Image(valorCampoPDF, pathDestino);
                                    valorCampoPDF = "*" + valorCampoPDF + "*";
                                }

                                // Kintell
                                // Pongo esto porque en el IBAN tenemos 34 posiciones reservadas, pero en verdad el valor tiene 23, y si no pongo esto y el if de abajo (&& pCamposPdfContratoGasConfortDTO.OrdenPintar <= valorCampoPDF.Length), da error.
                                if (pCamposPdfContratoGasConfortDTO.OrdenPintar != null && pCamposPdfContratoGasConfortDTO.OrdenPintar > valorCampoPDF.Length)
                                {
                                    valorCampoPDF = "";
                                }

                                //si el valor del campo tiene que ir fraccionado en el pdf lo procesamos por partes.
                                if (pCamposPdfContratoGasConfortDTO.OrdenPintar != null && pCamposPdfContratoGasConfortDTO.OrdenPintar <= valorCampoPDF.Length)
                                {
                                    valorCampoPDF = valorCampoPDF.Substring((int)pCamposPdfContratoGasConfortDTO.OrdenPintar - 1, 1);
                                }

                                //Insertamos el valor en el campo correspondiente del pdf.
                                pdfFormFields.SetField(nombreCampoPDF, valorCampoPDF);

                                //Se da formato al campo del pdf con lo parametrizado en BBDD.
                                if (pCamposPdfContratoGasConfortDTO.TamanyoLetra != null
                                || !string.IsNullOrEmpty(pCamposPdfContratoGasConfortDTO.ColorLetra)
                                || !string.IsNullOrEmpty(pCamposPdfContratoGasConfortDTO.TipoLetra))
                                {
                                    if (pCamposPdfContratoGasConfortDTO.TamanyoLetra != null)

                                        pdfFormFields.SetFieldProperty(nombreCampoPDF, "textSize", (float)pCamposPdfContratoGasConfortDTO.TamanyoLetra, null);

                                    if (!string.IsNullOrEmpty(pCamposPdfContratoGasConfortDTO.ColorLetra))
                                        pdfFormFields.SetFieldProperty(nombreCampoPDF, "textColor", iTextSharp.text.BaseColor.DARK_GRAY, null); //iTextSharp.text.BaseColor.DARK_GRAY

                                    if (!string.IsNullOrEmpty(pCamposPdfContratoGasConfortDTO.TipoLetra))
                                    {
                                        string fontName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), pCamposPdfContratoGasConfortDTO.TipoLetra); //Calibri.ttf

                                        BaseFont bf = BaseFont.CreateFont(fontName, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                                        pdfFormFields.SetFieldProperty(nombreCampoPDF, "textFont", bf, null);
                                    }

                                    pdfFormFields.RegenerateField(nombreCampoPDF);
                                }
                                else
                                {
                                    pdfFormFields.SetFieldProperty(nombreCampoPDF, "textSize", (float)9, null);
                                    pdfFormFields.SetFieldProperty(nombreCampoPDF, "textColor", iTextSharp.text.BaseColor.DARK_GRAY, null);
                                    string fontName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Calibri.ttf");
                                    BaseFont bf = BaseFont.CreateFont(fontName, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                                    pdfFormFields.SetFieldProperty(nombreCampoPDF, "textFont", bf, null);
                                    pdfFormFields.RegenerateField(nombreCampoPDF);
                                }
                            }
                        }
                    }

                }
                Image imagen = null;
                using (ManejadorFicheros.GetImpersonator())
                {
                    System.Drawing.Image CCBB = System.Drawing.Image.FromFile(rutaCCBBGenerado);
                    // Creamos la imagen y le ajustamos el tamaño
                    imagen = Image.GetInstance(CCBB, BaseColor.WHITE);// new Uri(rutaCCBBGenerado));//iTextSharp.text.Image imagen = iTextSharp.text.Image.GetInstance(@"C:\Proyectos\IBERDR13\smg\trunk\web\desarrollo\SMG.Web\Bin\CCBB.jpg");

                    imagen.BorderWidth = 0;
                    imagen.Alignment = Element.ALIGN_RIGHT;
                    float percentage = 0.0f;
                    percentage = 150 / imagen.Width;
                    imagen.ScalePercent(percentage * 100);
                    //imagen.SetAbsolutePosition(100, PageSize.A4.Height - 65);
                    imagen.SetAbsolutePosition(100, PageSize.A4.Height - 60);
                    pdfContentByte.AddImage(imagen);

                    CCBB.Dispose();

                }

                //20210325 BGN Borramos la imagen del codigo de barras generado
                ManejadorFicheros.BorrarFichero(rutaCCBBGenerado);

                using (ManejadorFicheros.GetImpersonator())
                {
                    pdfStamper.FormFlattening = true;
                    pdfStamper.SetFullCompression();
                    pdfStamper.Close();
                    return pNombreFichero.ValorCampoPDF;
                }

            }
            catch (Exception e)
            {
                //throw new Exception("Error filling form " + pathOrigen + " to " + pathDestino, e);
                throw new Exception(e.Message + " " + e.StackTrace, e);
            }
            finally
            {
                using (ManejadorFicheros.GetImpersonator())
                {
                    pdfStamper.Close();
                }
            }
        }
        
        #endregion

        #region Public Methods

        /// <summary>
        /// Obtiene los ficheros que están pendientes de enviar a gestión documental
        /// </summary>
        /// <returns>Lista de documentos</returns>
        public static string GenerarContratoGasconfort(string pCodContrato, decimal pIdSolicitud)
        {
            try
            {
                List<PCamposPdfContratoGasConfortDTO> lPCamposPdfContratoGasConfortDTO = new List<PCamposPdfContratoGasConfortDTO>();

                //Obtenemos los datos para rellenar el pdf
                lPCamposPdfContratoGasConfortDTO = PCamposPdfContratoGasConfort.ObtenerDatosContratoGasConfort(pCodContrato, pIdSolicitud);

                //if (rutaOrigen == null)
                //MostrarMensaje(Resources.TextosJavaScript.TEXTO_VUELVA_A_SELECCIONAR_LA_SOLICITUD);//"Vuelva a seleccionar la solicitud en la búsqueda");

                if (lPCamposPdfContratoGasConfortDTO != null && lPCamposPdfContratoGasConfortDTO.Count > 0)
                    return RellenarPDF(lPCamposPdfContratoGasConfortDTO);
                else
                    return "";
            }
            catch (Exception e)
            {
                //throw new Exception("Error generando contrato de Gas confort", e);
                throw new Exception(e.Message + " " + e.StackTrace, e);
            }

        }

        #endregion
    }
}