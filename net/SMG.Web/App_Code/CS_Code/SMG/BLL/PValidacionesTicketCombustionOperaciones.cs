//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por la herramienta GeneradorCodigo.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto 
//     y se perderán si se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using Iberdrola.SMG.DAL.DB;
using Iberdrola.SMG.DAL.DTO;
using Iberdrola.SMG.WS;
using System;
using System.Linq;
using System.Transactions;
using System.Text;
using Iberdrola.Commons.Utils;
using System.Data;
using System.IO;
using Iberdrola.Commons.Services.MailServices;
//using SelectPdf;
using iTextSharp.text;

namespace Iberdrola.SMG.BLL
{
    /// <summary>
    /// Métodos de acceso a base de datos para la entidad PValidacionesTicketCombustion
    /// </summary>
    public partial class PValidacionesTicketCombustion
    {
        public class Dato
        {
            public string Campo { get; set; }
            public string Valor { get; set; }

            public Dato(string campo, string valor)
            {
                Campo = campo;
                Valor = valor;
            }
        }

        #region Private Methods       
        //private static bool EsPValDependienteDeValorRequest(CierreVisitaRequest cierreVisita, PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO)
        private static bool EsPValDependienteDeValorRequest(TicketCombustionDTO requesTicketCombustiontDTO
                                                            , PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO)
        {
            bool EsPValDependiente = false;

            if (pValidacionesTicketCombustionDTO.Dependecia != null)
            {
                //string operador = string.Empty;
                string[] stringSeparators = new string[] { "=", "!=" };

                string nomCampoDependencia = pValidacionesTicketCombustionDTO.Dependecia.Split(stringSeparators, StringSplitOptions.None)[0].ToString();
                string valCampoDependencia = pValidacionesTicketCombustionDTO.Dependecia.Split(stringSeparators, StringSplitOptions.None)[1].ToString();

                object valCampoRequestDependencia = requesTicketCombustiontDTO.GetType().GetProperty(nomCampoDependencia).GetValue(requesTicketCombustiontDTO, null);

                decimal number = 0;
                if (decimal.TryParse(valCampoRequestDependencia.ToString(), out number))
                {
                    if (valCampoDependencia == valCampoRequestDependencia.ToString())
                        EsPValDependiente = true;
                }
                else
                {
                    if (valCampoDependencia.ToUpper() == "VACIO")
                        EsPValDependiente = true;
                }
            }

            return EsPValDependiente;
        }

        private static bool ValorDentroDeRangos(TicketCombustionDTO requesTicketCombustiontDTO
                                                , PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO
                                                , string rango
                                                , int posRango)
        {
            Object objPValValor = null;
            bool bValorRangoRequestValidado = false;

            if (rango == "Minimos")
                objPValValor = pValidacionesTicketCombustionDTO.ValorMinimo;
            else
                objPValValor = pValidacionesTicketCombustionDTO.ValorMaximo;

            if (objPValValor != null)
            {
                string strValValorRango = string.Empty;

                if (objPValValor.ToString().Contains("#"))
                    strValValorRango = objPValValor.ToString().Split('#')[posRango - 1].ToString(); //Le quitamos 1 para coger la posicion 0 o 1 del Array
                else
                    strValValorRango = objPValValor.ToString();

                //string pValValorRangoOperador = objPValValor.ToString().Split(':')[0];
                //Object pValValorRango = objPValValor.ToString().Split(':')[1];

                string pValValorRangoOperador = strValValorRango.Split(':')[0];
                Object pValValorRango = strValValorRango.Split(':')[1];

                string[] apValValoresRango = new string[0];

                //Si existen multiples valores los recogemos.
                if (pValValorRango.ToString().Contains(";"))
                    apValValoresRango = pValValorRango.ToString().Split(';');
                else
                    apValValoresRango = new string[] { pValValorRango.ToString() };

                //Recuperamos el valor del campo
                object valorRequest = requesTicketCombustiontDTO.GetType().GetProperty(pValidacionesTicketCombustionDTO.NombreCampoRequest).GetValue(requesTicketCombustiontDTO, null);

                foreach (string valorRango in apValValoresRango)
                {
                    decimal dValorRango = Convert.ToDecimal(valorRango);
                    decimal dValorRequest = Convert.ToDecimal(valorRequest);

                    bValorRangoRequestValidado = Compare(pValValorRangoOperador, dValorRequest, dValorRango);

                    if (bValorRangoRequestValidado)
                        break;
                }
            }

            return bValorRangoRequestValidado;
        }

        private static bool Compare<T>(string op, T x, T y) where T : IComparable
        {
            switch (op)
            {
                case "==": return x.CompareTo(y) == 0;
                case "!=": return x.CompareTo(y) != 0;
                case ">": return x.CompareTo(y) > 0;
                case ">=": return x.CompareTo(y) >= 0;
                case "<": return x.CompareTo(y) < 0;
                case "<=": return x.CompareTo(y) <= 0;
            }

            return false;
        }

        //private static bool SeTieneQueEjecutarAnomalia(TicketCombustionDTO requesTicketCombustiontDTO
        //                                                , PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO
        //                                                , string cuandoEjecutaAnomalia)
        //{
        //    //COMPROBAR SI EXISTEN VARIOS RANGOS A VALIDAR


        //    bool bEjecutaAnomalia = false;

        //    //Comprobamos si el valor se encuntra dentro de los limites de los minimos.
        //    bool bValorRequestDentroRangoMinimos = ValorDentroDeRangos(requesTicketCombustiontDTO, pValidacionesTicketCombustionDTO, "Minimos");

        //    //Comprobamos si el valor se encuntra dentro de los limites de los maximos.
        //    bool bValorRequestDentroRangoMaximos = ValorDentroDeRangos(requesTicketCombustiontDTO, pValidacionesTicketCombustionDTO, "Maximos");

        //    //Si no se superan las validaciones de los rangos establecidos se ejecuta la anomalia establecida.
        //    //Aqui se controla si se debe de ejecutar la anomalia, ya sea cuando cuando se cumple la validaciones establecidas o no.
        //    if (((pValidacionesTicketCombustionDTO.ValorMinimo != null && bValorRequestDentroRangoMinimos)
        //            && (pValidacionesTicketCombustionDTO.ValorMaximo != null && bValorRequestDentroRangoMaximos)) // >=x valor <=y --> SI NO SE CUMPLE REALIZAMOS ACCION
        //        || ((pValidacionesTicketCombustionDTO.ValorMinimo != null && bValorRequestDentroRangoMinimos) && pValidacionesTicketCombustionDTO.ValorMaximo == null) // >=x valor NULL --> SI NO SE CUMPLE REALIZAMOS ACCION
        //        || ((pValidacionesTicketCombustionDTO.ValorMaximo != null && bValorRequestDentroRangoMaximos) && pValidacionesTicketCombustionDTO.ValorMinimo == null) // NULL valor <=y --> SI NO SE CUMPLE REALIZAMOS ACCION
        //       )
        //    {
        //        //Se debe de ejecutar la anomalia cuando se cumple la validacion 
        //        if (cuandoEjecutaAnomalia == "SiCumple")
        //            bEjecutaAnomalia = true;
        //    }
        //    else
        //    {
        //        //Se debe de ejecutar la anomalia cuando NO se cumple la validacion 
        //        if (cuandoEjecutaAnomalia == "NoCumple")
        //            bEjecutaAnomalia = true;
        //    }

        //    return bEjecutaAnomalia;
        //}

        private static bool SeTieneQueEjecutarAnomalia(TicketCombustionDTO requesTicketCombustiontDTO
                                                        , PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO
                                                        , string pCuandoEjecutaAnomalia
                                                        , ref string tipoAnomalia)
        {
            //COMPROBAR SI EXISTEN VARIOS RANGOS A VALIDAR
            int iMaximoContador = 1;
            bool bCumpleRangoEstablecido = false;
            bool bEjecutaAnomalia = false;
            string[] arrayCuandoEjecutaAnomalia = null;
            string cuandoEjecutaAnomalia = string.Empty;

            if ((pValidacionesTicketCombustionDTO.ValorMinimo != null && pValidacionesTicketCombustionDTO.ValorMinimo.ToString().Contains("#")) || 
                (pValidacionesTicketCombustionDTO.ValorMaximo != null && pValidacionesTicketCombustionDTO.ValorMaximo.ToString().Contains("#")))
            {
                int[] arrayContadores = new int[2];

                //
                arrayContadores[0] = (pValidacionesTicketCombustionDTO.ValorMinimo != null) ? pValidacionesTicketCombustionDTO.ValorMinimo.Split('#').Length : 1;
                arrayContadores[1] = (pValidacionesTicketCombustionDTO.ValorMaximo != null) ? pValidacionesTicketCombustionDTO.ValorMaximo.Split('#').Length : 1;

                iMaximoContador = arrayContadores.Max();
            }

            //Obtenemos por cada rango de validacion cuando debe de ejecutar la anomalia, si cuando el valor se encuentra dentro del rango establecido o no.
            if (pCuandoEjecutaAnomalia.Contains("#"))
                arrayCuandoEjecutaAnomalia = pCuandoEjecutaAnomalia.Split('#');
            else
                arrayCuandoEjecutaAnomalia = new string[] { pCuandoEjecutaAnomalia };

            for (int iPosRango = 1; iPosRango <= iMaximoContador; iPosRango++)
            {
                //Comprobamos si el valor se encuntra dentro de los limites de los minimos.
                bool bValorRequestDentroRangoMinimos = ValorDentroDeRangos(requesTicketCombustiontDTO, pValidacionesTicketCombustionDTO, "Minimos", iPosRango);

                //Comprobamos si el valor se encuntra dentro de los limites de los maximos.
                bool bValorRequestDentroRangoMaximos = ValorDentroDeRangos(requesTicketCombustiontDTO, pValidacionesTicketCombustionDTO, "Maximos", iPosRango);

                //Obtenemos por cada rango de validacion cuando debe de ejecutar la anomalia.
                cuandoEjecutaAnomalia = arrayCuandoEjecutaAnomalia[iPosRango - 1]; //Le quitamos 1 para coger la posicion 0 o 1 del Array

                //Si no se superan las validaciones de los rangos establecidos se ejecuta la anomalia establecida.
                //Aqui se controla si se debe de ejecutar la anomalia, ya sea cuando cuando se cumple la validaciones establecidas o no.
                if (((pValidacionesTicketCombustionDTO.ValorMinimo != null && bValorRequestDentroRangoMinimos)
                        && (pValidacionesTicketCombustionDTO.ValorMaximo != null && bValorRequestDentroRangoMaximos)) // >=x valor <=y --> SI NO SE CUMPLE REALIZAMOS ACCION
                    || ((pValidacionesTicketCombustionDTO.ValorMinimo != null && bValorRequestDentroRangoMinimos) && pValidacionesTicketCombustionDTO.ValorMaximo == null) // >=x valor NULL --> SI NO SE CUMPLE REALIZAMOS ACCION
                    || ((pValidacionesTicketCombustionDTO.ValorMaximo != null && bValorRequestDentroRangoMaximos) && pValidacionesTicketCombustionDTO.ValorMinimo == null) // NULL valor <=y --> SI NO SE CUMPLE REALIZAMOS ACCION
                   )
                {
                    //Se debe de ejcutar la anomalia cuando:
                    //1- Valores dentro de los rangos establecidos
                    //2- Cuando esta configurado que 'SI' se debe de cumplir cuando ejecutar la anomalia
                    if (cuandoEjecutaAnomalia == "SiCumple")
                        bEjecutaAnomalia = true;
                }
                else
                {
                    //Se debe de ejcutar la anomalia cuando:
                    //1- Valores 'NO' se encuentran dentro de los rangos establecidos
                    //2- Cuando esta configurado que 'NO' se debe de cumplir cuando ejecutar la anomalia
                    if (cuandoEjecutaAnomalia == "NoCumple")
                        bEjecutaAnomalia = true;

                    //Reseteamos el tipoAnomalia cuando no se cumple lo parametrizado:
                    //1- Valores 'NO' se encuentran dentro de los rangos establecidos
                    //2- Cuando esta configurado que 'SI' se debe de cumplir cuando ejecutar la anomalia
                    if (cuandoEjecutaAnomalia == "SiCumple" && !string.IsNullOrEmpty(tipoAnomalia))
                        tipoAnomalia = string.Empty;
                }

                if (!bEjecutaAnomalia)
                    break; //Si no hay anomalia no seguimos con el siguiente rango de validacion.
            }

            return bEjecutaAnomalia;
        }


        private static void EnvioCorreoAnomaliaCritica(string emailCodContrato, string emailcodVisitaSol, string errorAnomalia)
        {
            ConfiguracionDTO confCuentasTo = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_CUENTA_CORREO_ANOMALIA_CRITICA);
            ConfiguracionDTO confCuentasFrom = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.CUENTA_CORREO_ERRORES_FROM);

            string asunto = "[SMG] Ticket combustion con anomalia critica " + errorAnomalia;

            StringBuilder strTexto = new StringBuilder();
            strTexto.Append("Hola,");
            strTexto.Append("<br><br>");
            strTexto.Append("Se ha detectado la anomalia critica: " + errorAnomalia + ", a la hora de procesar el ticket de combustion: ");
            strTexto.Append("<br>");
            strTexto.Append("Contrato: " + emailCodContrato);
            strTexto.Append("<br>");
            strTexto.Append(emailcodVisitaSol);
            strTexto.Append("<br><br>");
            strTexto.Append("Saludos.");

            bool enviado = UtilidadesMail.EnviarAviso(asunto, strTexto.ToString(), confCuentasFrom.Valor, confCuentasTo.Valor);
        }

        private static void EnvioCorreoTrasAnomalia(TicketCombustionDTO ticketCombustiontDTO, string errorAnomalia, bool isAnomaliaPrioritaria)
        {
            ConfiguracionDTO confCuentasTo = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_CUENTA_CORREO_ANOMALIA_CRITICA);
            ConfiguracionDTO confCuentasFrom = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.CUENTA_CORREO_ERRORES_FROM);

            string emailcodVisitaSol = string.Empty;
            string descAsuntoTipoAnomalia = string.Empty;

            if (ticketCombustiontDTO.IdSolicitud != null && ticketCombustiontDTO.IdSolicitud > 0)
                emailcodVisitaSol = "Solicitud: " + ticketCombustiontDTO.IdSolicitud.ToString();
            else
                emailcodVisitaSol = "Visita: " + ticketCombustiontDTO.CodigoVisita.ToString();

            //string asunto = "[SMG] Ticket combustion con anomalia critica detectada.";

            if (ticketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.PRECINTADODEINSTALACION))
                descAsuntoTipoAnomalia = StringEnum.GetStringValue(TicketCombustionAviso.AnomaliaPrincipalPrioritariaDetectada);
            else
                descAsuntoTipoAnomalia = StringEnum.GetStringValue(TicketCombustionAviso.AnomaliaSecundariaPrioritariaDetectada);

            descAsuntoTipoAnomalia += (isAnomaliaPrioritaria ? " PRIORITARIA" : string.Empty);

            string asunto = "[SMG] Ticket combustion con " + descAsuntoTipoAnomalia + " detectada.";

            StringBuilder strTexto = new StringBuilder();
            strTexto.Append("Hola,");
            strTexto.Append("<br><br>");
            strTexto.Append("Se ha detectado anomalia: " + errorAnomalia + ", a la hora de procesar el ticket de combustion: ");
            strTexto.Append("<br>");
            strTexto.Append("Contrato: " + ticketCombustiontDTO.CodigoContrato);
            strTexto.Append("<br>");
            strTexto.Append(emailcodVisitaSol);
            strTexto.Append("<br><br>");
            strTexto.Append("Saludos.");

            bool enviado = UtilidadesMail.EnviarAviso(asunto, strTexto.ToString(), confCuentasFrom.Valor, confCuentasTo.Valor);
        }

        public static void EnvioCorreoInformeRevisionMantenimiento(TicketCombustionDTO ticketCombustiontDTO)
        {
            //controlamos si se debe de guardar en una ruta la carta generada
            bool bGuardarEnRutaCarta = false;
            bool bGenerarInforme = false;
            string strAsunto = string.Empty;
            string lRutaCartas = string.Empty;

            List<UtilidadesMail.Adjunto> lAdjuntos = new List<UtilidadesMail.Adjunto>();

            //
            ConfiguracionDTO confActivarGenerarInforme = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_ENVIO_INFORME);
            if (confActivarGenerarInforme != null && !string.IsNullOrEmpty(confActivarGenerarInforme.Valor))
                bGenerarInforme = Boolean.Parse(confActivarGenerarInforme.Valor);

            if (bGenerarInforme)
            {
                ConfiguracionDTO confCuentasTo = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_CUENTA_CORREO_ANOMALIA_CRITICA);
                if (string.IsNullOrEmpty(confCuentasTo.Valor)) throw new Exception(Enumerados.Configuracion.TICKET_COMBUSTION_CUENTA_CORREO_ANOMALIA_CRITICA.ToString() + " no esta configurada cuenta correo.");

                ConfiguracionDTO confCuentasFrom = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.CUENTA_CORREO_ERRORES_FROM);
                if (string.IsNullOrEmpty(confCuentasFrom.Valor)) throw new Exception(Enumerados.Configuracion.CUENTA_CORREO_ERRORES_FROM.ToString() + " no esta configurada cuenta correo.");

                //Ruta donde se encuentras los ficheros de firma
                ConfiguracionDTO confRutaFicheros = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_FICHEROS_MAILING);
                if (string.IsNullOrEmpty(confRutaFicheros.Valor)) throw new Exception(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_FICHEROS_MAILING.ToString() + " Path not found.");

                //Ruta donde se encuentran los ficheros de plantilla
                ConfiguracionDTO confRutaPlantillas = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_PLANTILLAS_MAILING);
                if (string.IsNullOrEmpty(confRutaPlantillas.Valor)) throw new Exception(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_PLANTILLAS_MAILING.ToString() + " Path not found.");

                //Ruta donde se dejan los documentos generados.
                ConfiguracionDTO confRutaCartas = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_INF_REVISION_MANTENIMIENTO);
                if (confRutaCartas != null && bGuardarEnRutaCarta) throw new Exception(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_INF_REVISION_MANTENIMIENTO.ToString() + " Path not found.");

                //Ruta donde se dejan los documentos generados.
                ConfiguracionDTO confActivarGuardadoInforme = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_GUARDADO_INFORME);
                if (confRutaCartas != null && !string.IsNullOrEmpty(confActivarGuardadoInforme.Valor))
                    bGuardarEnRutaCarta = Boolean.Parse(confActivarGuardadoInforme.Valor);

                lRutaCartas = confRutaCartas.Valor;

                //Contruimos el cuerpo del mensaje que hay que enviar en el correo de ticket de combustion
                string cuerpoCorreo = ConstruirCuerpoEmailInformeRevisionMantenimiento(ticketCombustiontDTO);

                //Para pruebas
                //lRutaCartas = @"C:\Temp\SMG\PLANTILLAS\TICKET_COMBUSTION\";

                strAsunto = (lRutaCartas.Contains("C:") ? "[Prueba] " : "") + "Ref. " + ticketCombustiontDTO.CodigoContrato + " INFORME DE REVISIÓN DE MANTENIMIENTO DE INSTALACIÓN DE GAS";

                //Pendiente de saber q nombre de fichero debe de tener ???????????????????????????????????????????????????????????????????????????
                string nombreDoc = "Nombre fichero_" + DateTime.Now.ToString("yyyyMMdd") + "_" + DateTime.Now.ToString("HHmmss") + ".pdf";

                MemoryStream stPdfDoc = ConstruirDocumentoInformeRevisionMantenimiento(ticketCombustiontDTO);

                if (stPdfDoc != null)
                {
                    lAdjuntos.Add(new UtilidadesMail.Adjunto(nombreDoc, stPdfDoc));

                    if (bGuardarEnRutaCarta)
                    {
                        lRutaCartas = Path.Combine(lRutaCartas, nombreDoc);

                        FileStream file = new FileStream(lRutaCartas, FileMode.Create, FileAccess.Write);
                        stPdfDoc.WriteTo(file);
                        file.Close();
                    }
                }

                //Enviamos el correo
                bool enviado = UtilidadesMail.EnviarAvisoConAdjunto(strAsunto, cuerpoCorreo, confCuentasFrom.Valor, confCuentasTo.Valor, lAdjuntos);
            }
        }

        private static string ConstruirHistoricoObservaciones(string pObsAnteriores, string pObsNuevas, string pUsuario)
        {
            string Horas = DateTime.Now.Hour.ToString();
            if (Horas.Length == 1) Horas = "0" + Horas;

            string Minutos = DateTime.Now.Minute.ToString();
            if (Minutos.Length == 1) Minutos = "0" + Minutos;

            string observ_finales = "[" + DateTime.Now.ToString().Substring(0, 10) + "-" + Horas + ":" + Minutos + "] " + pUsuario + ": " + pObsNuevas;

            if (!string.IsNullOrEmpty(pObsNuevas))
                pObsNuevas = observ_finales + (char)(13) + pObsAnteriores;
            else
                pObsNuevas = pObsAnteriores;

            return pObsNuevas;
        }

        //Creamos una clase para contener los valores que vamos a tratar de la solicitud
        private class CamposSolicitud
        {
            public CamposSolicitud(string pCodContrato
                                    , string pIdSolicitud
                                    , string pTipoMovimiento
                                    , string pUsuario
                                    , string pCodEstadoSol
                                    , string pObservaciones
                                    , string pProveedor
                                    , string pCodSubtipoSolicitud
                                    , string pCodAveria
                                    , string pCodVisita
                                    , string pTelefonoContacto
                                    , string pPersonaContacto)
            {
                this.CodContrato = pCodContrato;
                this.IdSolicitud = pIdSolicitud;
                this.TipoMovimiento = pTipoMovimiento;
                this.Usuario = pUsuario;
                this.CodEstadoSol = pCodEstadoSol;
                this.Observaciones = pObservaciones;
                this.Proveedor = pProveedor;
                this.CodSubtipoSolicitud = pCodSubtipoSolicitud;
                this.CodAveria = pCodAveria;
                this.CodVisita = pCodVisita;
                this.TelefonoContacto = pTelefonoContacto;
                this.PersonaContacto = pPersonaContacto;
            }

            public string CodContrato { get; set; }
            public string IdSolicitud { get; set; }
            public string TipoMovimiento { get; set; }
            public string Usuario { get; set; }
            public string CodEstadoSol { get; set; }
            public string Observaciones { get; set; }
            public string Proveedor { get; set; }
            public string CodSubtipoSolicitud { get; set; }
            public string CodAveria { get; set; }
            public string CodVisita { get; set; }
            public string TelefonoContacto { get; set; }
            public string PersonaContacto { get; set; }

        }

        private static CamposSolicitud RecuperarValoresSolicitud(string pIdSolicitud, string pTipoMovimiento, string pUsuario, string pCodEstadoSol, string pObservacion, string pCodVisita)
        {
            SolicitudesDB objSolicitudesDB = new SolicitudesDB();
            CamposSolicitud camposSol = null;
            string observaciones_Nuevas = string.Empty;

            //Recuperamos la informacion de la solicitud
            DataSet ds = objSolicitudesDB.GetSolicitudesPorIDSolicitud(pIdSolicitud, 1);

            string observaciones_Anteriores = ds.Tables[0].Rows[0]["Observaciones"].ToString();

            //Añadimos el comentario al historico de comentarios
            observaciones_Nuevas = ConstruirHistoricoObservaciones(observaciones_Anteriores, pObservacion, Constantes.USUARIO_SISTEMA);

            if (ds.Tables[0].Rows.Count > 0)
            {
                camposSol = new CamposSolicitud("", "", "", "", "", "", "", "", "", "", "", "");

                camposSol.CodContrato = ds.Tables[0].Rows[0]["Cod_contrato"].ToString();
                camposSol.IdSolicitud = ds.Tables[0].Rows[0]["ID_solicitud"].ToString();
                camposSol.TipoMovimiento = pTipoMovimiento;
                camposSol.Usuario = pUsuario;
                camposSol.CodEstadoSol = (string.IsNullOrEmpty(pCodEstadoSol) ? ds.Tables[0].Rows[0]["Estado_solicitud"].ToString() : pCodEstadoSol);
                camposSol.Observaciones = observaciones_Nuevas;
                camposSol.Proveedor = ds.Tables[0].Rows[0]["Proveedor"].ToString();
                camposSol.CodSubtipoSolicitud = ds.Tables[0].Rows[0]["subtipo_solicitud"].ToString();
                camposSol.CodAveria = ds.Tables[0].Rows[0]["cod_averia"].ToString();
                camposSol.CodVisita = pCodVisita;
                camposSol.TelefonoContacto = ds.Tables[0].Rows[0]["telefono_contacto"].ToString();
            }

            return camposSol;
        }

        private static bool ProcesarAccionesTrasAnomalia(//Object request,
                                                         TicketCombustionDTO requesTicketCombustiontDTO
                                                        , PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO
                                                        , string tipoAnomalia
                                                        , string usuario)
        {
            try
            {
                Solicitud solicitud = new Solicitud();
                SolicitudesDB objSolicitudesDB = new SolicitudesDB();

                string observaciones_Cerrar = string.Empty;
                string observaciones_Crear = string.Empty;
                string observaciones_Nuevas = string.Empty;
                string codSubtipoSol = string.Empty;
                string codEstadoSol = string.Empty;
                string subtiposol = string.Empty;
                string emailCodContrato = string.Empty;
                string emailcodVisitaSol = string.Empty;

                //Obtenemos la descripcion del error asociado al tipo de anomalia.
                TicketCombustionError enumErrorAnomalia = (TicketCombustionError)Enum.Parse(typeof(TicketCombustionError), pValidacionesTicketCombustionDTO.NombreCampoRequest + "_FueraRangos_" + tipoAnomalia);
                string errorAnomalia = StringEnum.GetStringValue(enumErrorAnomalia);

                //if (request.GetType().Name == "CierreSolicitudRequest")
                if (requesTicketCombustiontDTO.IdSolicitud != null && requesTicketCombustiontDTO.IdSolicitud > 0)
                {
                    switch (tipoAnomalia)
                    {
                        case "Anomalia_Secundaria": //GENERAR nueva solicitud de visita INCORRECTA
                            codSubtipoSol = StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.VisitaIncorrecta); //003 --> visita incorrecta
                            subtiposol = Enumerados.SubtipoSolicitud.VisitaIncorrecta.ToString();

                            //Si la solicitud origen es de tipo averia incorrecta abrimos una nueva solicitud de averia incorrecta.
                            if (requesTicketCombustiontDTO.SubTipoSolicitud == (int)Enumerados.SubtipoSolicitud.AveriaMantenimientodeGas) //1 --> Averia mantenimiento
                            {
                                codSubtipoSol = StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.AveriaIncorrecta); //004 --> Averia incorreta
                                subtiposol = Enumerados.SubtipoSolicitud.AveriaIncorrecta.ToString();
                            }

                            observaciones_Crear = "Se crea la solicitud actual por producirse una anomalia de tipo " + errorAnomalia + ", a la hora de procesar el ticket de combustion. ";
                            break;
                        case "Defecto_Principal": //GENERAR nueva solicitud de Revisión por Precinte
                            codSubtipoSol = StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.RevisionPorPrecinte); //005 --> revision pro precinte
                            subtiposol = Enumerados.SubtipoSolicitud.RevisionPorPrecinte.ToString();
                            observaciones_Crear = "Se crea la solicitud actual por producirse una anomalia de tipo " + errorAnomalia + ", a la hora de procesar el ticket de combustion. ";
                            break;
                    }

                    observaciones_Cerrar = "Se cierra solicitud actual  como erronea por anomalia " + errorAnomalia + ", a la hora de procesar el ticket de combustion. Se crea solicitud por " + subtiposol + ".";

                    //recuperamos la solcitud
                    CamposSolicitud camposSol = RecuperarValoresSolicitud(requesTicketCombustiontDTO.IdSolicitud.ToString(), "002", usuario, "", observaciones_Cerrar, "");

                    //1. MODIFICAR solicitud actual. como erronea, cambiar estado a "Errónea"
                    //Cambiamos de estado
                    codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.visitaErronea); //082 --> visita erronea
                    solicitud.CambiarEstadoSolicitud(Convert.ToInt32(camposSol.IdSolicitud), codEstadoSol, usuario); //Pdte de saber que estado poner

                    //Actualizamos las observaciones en la solicitud.
                    objSolicitudesDB.UpdateObservacionesSolicitud(camposSol.IdSolicitud, camposSol.Observaciones);

                    //Recuperamos la informacion de la solicitud modificada
                    camposSol = RecuperarValoresSolicitud(requesTicketCombustiontDTO.IdSolicitud.ToString(), "002", usuario, "", "", "");

                    //Guardamos en el hitorico, enviamos las interacciones
                    int id_movimiento = solicitud.ActualizarHistoricoSolicitud(camposSol.CodContrato, camposSol.IdSolicitud, "002", Constantes.USUARIO_SISTEMA, camposSol.CodEstadoSol, camposSol.Observaciones, camposSol.Proveedor, camposSol.CodSubtipoSolicitud, camposSol.CodAveria, camposSol.CodVisita, "M");

                    //2. GENERAR nueva solicitud
                    //Añadimos el comentario al historico de comentarios
                    observaciones_Nuevas = ConstruirHistoricoObservaciones("", observaciones_Crear, usuario);
                    codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.Pendientedecontactar); //001
                    string id_solicitud = objSolicitudesDB.AddSolicitud(camposSol.CodContrato, "001", codSubtipoSol, codEstadoSol, camposSol.TelefonoContacto, camposSol.PersonaContacto, "", observaciones_Nuevas, camposSol.Proveedor, false, false, false).ToString();

                    //Guardamos en la caracteristica el id de la solicitude que se ha cerrado como visitaErronea
                    objSolicitudesDB.GuardarCaracteristicaWS("189", camposSol.IdSolicitud, int.Parse(id_solicitud));

                    id_movimiento = solicitud.ActualizarHistoricoSolicitud(camposSol.CodContrato, id_solicitud, "002", usuario, codEstadoSol, observaciones_Nuevas, camposSol.Proveedor, codSubtipoSol, "", "0", "A");

                    emailCodContrato = camposSol.CodContrato;
                    emailcodVisitaSol = "Solicitud: " + camposSol.IdSolicitud;
                }
                else
                {
                    Visitas visitas = new Visitas();
                    VisitaDTO visitasDTO = null;

                    visitasDTO = visitas.DatosVisitasWS(requesTicketCombustiontDTO.CodigoContrato, requesTicketCombustiontDTO.CodigoVisita.ToString(), requesTicketCombustiontDTO.Proveedor);

                    if (visitasDTO != null)
                    {
                        switch (tipoAnomalia)
                        {
                            case "Anomalia_Secundaria": //GENERAR nueva solicitud de visita INCORRECTA
                                codSubtipoSol = StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.VisitaIncorrecta); //003
                                subtiposol = Enumerados.SubtipoSolicitud.VisitaIncorrecta.ToString();
                                observaciones_Crear = "Se crea la solicitud actual por producirse una anomalia de tipo " + errorAnomalia + ", a la hora de procesar el ticket de combustion. ";
                                break;
                            case "Defecto_Principal": //GENERAR nueva solicitud de Revisión por Precinte
                                codSubtipoSol = StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.RevisionPorPrecinte); //005
                                subtiposol = Enumerados.SubtipoSolicitud.RevisionPorPrecinte.ToString();
                                observaciones_Crear = "Se crea la solicitud actual por producirse una anomalia de tipo " + errorAnomalia + ", a la hora de procesar el ticket de combustion. ";
                                break;
                        }

                        //1. MODIFICAR visita actual. como erronea, cambiar estado a "Errónea" 
                        visitasDTO.CodigoEstadoVisita = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //13 --> Visita erronea
                        observaciones_Cerrar = "Se cierra visita actual como erronea por anomalia " + errorAnomalia + ", a la hora de procesar el ticket de combustion. Se crea solicitud por " + subtiposol + ".";
                        visitasDTO.Observaciones = observaciones_Cerrar;

                        Visitas.ActualizarDatosVisitaYVisitaHistoricoWS(visitasDTO, usuario);

                        //2. GENERAR nueva solicitud
                        string proveedor = requesTicketCombustiontDTO.Proveedor.Substring(0, 3);

                        //Añadimos el comentario al historico de comentarios
                        observaciones_Nuevas = ConstruirHistoricoObservaciones("", observaciones_Crear, usuario);
                        codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.Pendientedecontactar); //001
                        //string id_solicitud = objSolicitudesDB.AddSolicitud(visitasDTO.CodigoContrato, "001", codSubtipoSol, codEstadoSol, cierreVisita.TelefonoContacto1.ToString(), "", "", observaciones_Nuevas, cierreVisita.Proveedor.ToString(), false, false, false).ToString();
                        string id_solicitud = objSolicitudesDB.AddSolicitud(visitasDTO.CodigoContrato, "001", codSubtipoSol, codEstadoSol, requesTicketCombustiontDTO.TelefonoContacto1, requesTicketCombustiontDTO.PersonaContacto, "", observaciones_Nuevas, proveedor, false, false, false).ToString();

                        //Guardamos en caracteristica el id de la visita que se ha cerrado como visitaErronea
                        objSolicitudesDB.GuardarCaracteristicaWS("188", visitasDTO.CodigoVisita.ToString(), int.Parse(id_solicitud));

                        //int id_movimiento = solicitud.ActualizarHistoricoSolicitud(visitasDTO.CodigoContrato, id_solicitud, "002", usuario, codEstadoSol, observaciones_Nuevas, cierreVisita.Proveedor.ToString(), codSubtipoSol, "", "0", "A");
                        int id_movimiento = solicitud.ActualizarHistoricoSolicitud(visitasDTO.CodigoContrato, id_solicitud, "002", usuario, codEstadoSol, observaciones_Nuevas, proveedor, codSubtipoSol, "", "0", "A");

                        emailCodContrato = visitasDTO.CodigoContrato;
                        emailcodVisitaSol = "Visita: " + visitasDTO.CodigoVisita.ToString();
                    }
                }

                //3. Enviar email
                EnvioCorreoAnomaliaCritica(emailCodContrato, emailcodVisitaSol, errorAnomalia);

            }
            catch (Exception ex)
            {
                throw;
            }

            return true;
        }

        private static MemoryStream ConstruirDocumentoInformeRevisionMantenimiento(TicketCombustionDTO ticketCombustiontDTO)
        {
            //ConvertidorHTMLToPDF convertidorHTMLToPDF = new ConvertidorHTMLToPDF();
            //PdfDocument docPDF = new PdfDocument();
            //StringBuilder sbHTMLTextoHTML = new StringBuilder();
            MemoryStream pdfMemoryStream = new MemoryStream();

            //string lHTML = string.Empty;
            //string lRutaPlantillas = string.Empty;

            ////Ruta base de plantillas
            //ConfiguracionDTO confRutaPlantillas = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_PLANTILLAS_MAILING);
            //lRutaPlantillas = confRutaPlantillas.Valor;

            ////Para pruebas
            //lRutaPlantillas = @"C:\Temp\SMG\PLANTILLAS\TICKET_COMBUSTION";

            try
            {
                //using (ManejadorFicheros.GetImpersonator())
                //    lHTML = File.ReadAllText(Path.Combine(lRutaPlantillas, "Plantilla_Ejemplo_Convert_HTML_to_PDF.html"), Encoding.Default);

                //sbHTMLTextoHTML.Append(lHTML);

                ////Obtenemos los datos para posteriormente sustituirlos.
                ////List<Dato> datos = DevolverDatosCartaTicketCombustion(ticketCombustiontDTO);

                //List<Dato> datos = PMapeoEtiquetasDocumentosConCamposBbdd.ObtenerDatosParaEtiquetas("TICKET_COMBUSTION_DOCUMENTO_INFORME_REVISION_MANENIMIENTO"
                //                                                                    , ticketCombustiontDTO.CodigoContrato
                //                                                                    , ticketCombustiontDTO.IdSolicitud
                //                                                                    , ticketCombustiontDTO.CodigoVisita
                //                                                                    , ticketCombustiontDTO.Proveedor);
                ////List<Dato> datos = DevolverDatosCuerpoEmail(ticketCombustiontDTO);
                //foreach (Dato dato in datos)
                //    sbHTMLTextoHTML.Replace(dato.Campo, dato.Valor);


                ////Para pruebas
                ////sbHTMLTextoHTML.Append("<html><body>Habia una vez un barquito chiquitito</body></html>" + System.Environment.NewLine);

                ////Convertimos el html en un pdf
                //docPDF = convertidorHTMLToPDF.GenerarDocumentoPDF(sbHTMLTextoHTML);

                //docPDF.Save(pdfMemoryStream);

                ////docPDF.Save(pdfMemoryStream); // save pdf document into a MemoryStream
                ////pdfMemoryStream.Position = 0; // reset stream position

                return pdfMemoryStream;
            }
            catch (Exception ex)
            {
                throw new Exception("Se ha producido un error en proceso de creacion del documento PDF.");
            }
            finally
            {
                //docPDF.Close();
            }            
        }

        //private static List<Dato> DevolverDatosCartaTicketCombustion(TicketCombustionDTO ticketCombustiontDTO)
        //{
        //    List<Dato> datos = new List<Dato>();

        //    return datos;
        //}

        //private static List<Dato> DevolverDatosCuerpoEmail(TicketCombustionDTO ticketCombustiontDTO)
        //{
        //    Mantenimiento mantenimiento = new Mantenimiento();
        //    CalderaDTO calderaDTO = new CalderaDTO();
        //    MantenimientoDTO mantenimientoDTO = new MantenimientoDTO();

        //    List<Dato> datos = new List<Dato>();

        //    datos.Add(new Dato("#[CONTRATO]#", ticketCombustiontDTO.CodigoContrato));

        //    //Obtenemos los diferentes datos que se requieres para rellenar el correo
        //    IDataReader datosMantenimiento = Mantenimiento.ObtenerDatosMantenimientoPorcontrato(ticketCombustiontDTO.CodigoContrato);
        //    calderaDTO = Calderas.ObtenerCaldera(ticketCombustiontDTO.CodigoContrato);

        //    if (datosMantenimiento != null)
        //    {
        //        while (datosMantenimiento.Read())
        //        {
        //            datos.Add(new Dato("#[NOMBRE_TITULAR]#", (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "NOM_TITULAR")));

        //            string tipViaPublic = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "TIP_VIA_PUBLICA");
        //            string nomCalle = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "NOM_CALLE");
        //            string codPortal = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "COD_PORTAL"); 
        //            string tipBis = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "TIP_BIS");
        //            string tipEscalera = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "TIP_ESCALERA");
        //            string tipPiso = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "TIP_PISO");
        //            string tipMano = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "TIP_MANO");
        //            string codPostal = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "COD_POSTAL"); 
        //            string poblacion = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "COD_POBLACION"); 
        //            string provincia = (string)DataBaseUtils.GetDataReaderColumnValue(datosMantenimiento, "COD_PROVINCIA"); 

        //            string direcSuministro = tipViaPublic + " " + nomCalle + " " + codPortal + 
        //                (string.IsNullOrEmpty(tipBis) ? "": ", " + tipBis) +
        //                (string.IsNullOrEmpty(tipEscalera) ? "" : ", " + tipEscalera) +
        //                (string.IsNullOrEmpty(tipPiso) ? "" : ", " + tipPiso) +
        //                (string.IsNullOrEmpty(tipMano) ? "" : " " + tipMano) + 
        //                (string.IsNullOrEmpty(codPostal) ? "" : ", " + codPostal) + 
        //                (string.IsNullOrEmpty(poblacion) ? "" : ", " + poblacion) + 
        //                (string.IsNullOrEmpty(provincia) ? "" : ", " + provincia);

        //            datos.Add(new Dato("#[DIRECCION_SUMINISTRO]#", direcSuministro.Trim()));
        //        }
        //    }

        //    //PENDIENTE si sub tipo solicitud 008 obtener caldera de caracteristicas


        //    if (calderaDTO != null)
        //    {
        //        datos.Add(new Dato("#[NOMBRE_APARATO]#", calderaDTO.DecripcionMarcaCaldera + "-" + calderaDTO.ModeloCaldera));
        //    }

        //    return datos;
        //}

        private static string ConstruirCuerpoEmailInformeRevisionMantenimiento(TicketCombustionDTO ticketCombustiontDTO)
        {
            //PMapeoEtiquetasDocumentosConCamposBbdd pMapeoEtiquetasDocumentosConCamposBbdd = new PMapeoEtiquetasDocumentosConCamposBbdd();
            string cuerpoCorreoFinal = string.Empty;

            try
            {
                string lRutaPlantillas = string.Empty;
                string lRutaFicheros = string.Empty;
                string lHTML = string.Empty;                

                StringBuilder lEstructuraCuerpo = null;
                StringBuilder lSaludo = null;
                StringBuilder lCuerpoMailA = null;
                StringBuilder lCuerpoMailB = null;
                StringBuilder lFirmaMail = null;

                //Ruta base de plantillas
                ConfiguracionDTO confRutaPlantillas = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_PLANTILLAS_MAILING);
                lRutaPlantillas = confRutaPlantillas.Valor;

                //Ruta donde se encuentras los ficheros de firma
                ConfiguracionDTO confRutaFicheros = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_RUTA_FICHEROS_MAILING);
                lRutaFicheros = confRutaFicheros.Valor;
                

                lEstructuraCuerpo = new StringBuilder();
                lSaludo = new StringBuilder();
                lCuerpoMailA = new StringBuilder();
                lCuerpoMailB = new StringBuilder();
                lFirmaMail = new StringBuilder();

                //lRutaPlantillas = @"C:\Temp\SMG\PLANTILLAS\TICKET_COMBUSTION\";
                //lRutaFicheros = @"C:\Temp\SMG\PLANTILLAS\TICKET_COMBUSTION\";

                //Saludo
                using (ManejadorFicheros.GetImpersonator())
                    lHTML = File.ReadAllText(Path.Combine(lRutaPlantillas, "Saludo.txt"), Encoding.Default);

                lHTML = string.Format(lHTML, Saludo());
                lSaludo.Append(lHTML + System.Environment.NewLine);
                //End Saludo

                //Cuerpo                
                using (ManejadorFicheros.GetImpersonator())
                    lHTML = File.ReadAllText(Path.Combine(lRutaPlantillas, "CuerpoTicketCombustioin1A.txt"), Encoding.Default);

                lCuerpoMailA.Append(lHTML + System.Environment.NewLine);

                //Obtenemos los datos para posteriormente sustituirlos.
                List<Dato> datos = PMapeoEtiquetasDocumentosConCamposBbdd.ObtenerDatosParaEtiquetas("TICKET_COMBUSTION_CUERPO_EMAIL_INFORME_REVISION_MANENIMIENTO"  //CuerpoEmailInformeRevisionMantenimiento
                                                                                                    , ticketCombustiontDTO.CodigoContrato
                                                                                                    , ticketCombustiontDTO.IdSolicitud
                                                                                                    , ticketCombustiontDTO.CodigoVisita
                                                                                                    , ticketCombustiontDTO.Proveedor);
                //List<Dato> datos = DevolverDatosCuerpoEmail(ticketCombustiontDTO);
                foreach (Dato dato in datos)
                    lCuerpoMailA.Replace(dato.Campo, dato.Valor);
                //Fin cuerpo

                //Firma
                using (ManejadorFicheros.GetImpersonator())
                    lHTML = File.ReadAllText(Path.Combine(lRutaPlantillas, "Firma.txt"), Encoding.Default);

                lRutaFicheros = Path.Combine(lRutaFicheros, "firma.gif");
                lHTML = string.Format(lHTML, lRutaFicheros, "TExto prueba");
                lFirmaMail.Append(lHTML + System.Environment.NewLine);
                //End Firma

                //Estructura correo
                using (ManejadorFicheros.GetImpersonator())
                    lHTML = File.ReadAllText(Path.Combine(lRutaPlantillas, "EstructuraMail.txt"), Encoding.Default);

                lEstructuraCuerpo.Append(lHTML);
                //End Estructura correo

                //Montamos el cuerpo del correo
                cuerpoCorreoFinal = string.Format(lEstructuraCuerpo.ToString()
                                                    , lCuerpoMailA.ToString()
                                                    , lCuerpoMailB.ToString()
                                                    , lFirmaMail.ToString());

            }
            catch (Exception ex)
            {
            }

            return cuerpoCorreoFinal;
        }

        /// <summary>
        /// Función que devuelve el saludo de los mensajes enviados por correo electrónico, en función de la hora de creación del mensaje
        /// </summary>
        /// <returns></returns>
        private static string Saludo()
        {
            if (DateTime.Now.Hour < 14)
            {
                return "Buenos días,";
            }
            else
            {
                return "Buenas tardes,";
            }
        }

        private static string ComprobacionesVariasSobreFichero(TicketCombustionDTO requesTicketCombustiontDTO
                                                                , string pNombreCampoFichero)
        {
            //Comprobamos el tamaño del fichero
            byte[] tempContenidoFichero = (byte[])requesTicketCombustiontDTO.GetType().GetProperty(pNombreCampoFichero).GetValue(requesTicketCombustiontDTO, null);
            byte[] contenidoFichero = new byte[tempContenidoFichero.Length];
            contenidoFichero = tempContenidoFichero;

            int minSize = 100;
            int maxSize = 1713718;

            if (!(contenidoFichero.Length >= minSize && contenidoFichero.Length <= maxSize))
                return "_ErrorLongitudFichero";

            return string.Empty;
        }

        private static string ComprobacionesVariasSobreNombreFichero(TicketCombustionDTO requesTicketCombustiontDTO
                                                                    , string pNombreCampoFichero
                                                                    , string SUBTIPO_SOLICITUD)
        {
            if (requesTicketCombustiontDTO.GetType().GetProperty(pNombreCampoFichero) != null)
            {
                object objValor = requesTicketCombustiontDTO.GetType().GetProperty(pNombreCampoFichero).GetValue(requesTicketCombustiontDTO, null);

                int idTipoDocumento = 0;

                //if (!string.IsNullOrEmpty(objValor.ToString()))
                //{
                string nombreFichero = objValor.ToString();

                string ErrorAnomalia = string.Empty;

                string[] sNombreFichero = nombreFichero.Split('_');
                string TipoDocumentoSinExtension = sNombreFichero[sNombreFichero.Length - 1].ToString();
                int posicionPunto = TipoDocumentoSinExtension.IndexOf(".");

                TipoDocumentoSinExtension = TipoDocumentoSinExtension.Substring(0, posicionPunto);

                idTipoDocumento = Documento.ObtenerIdTipoDocumento(TipoDocumentoSinExtension);

                //Comprobamos que el documento introducido corresponda al documento correspondiente
                ConfiguracionDTO confProcesarValidacionesVisitas = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_VALIDACIONES_VISITAS);
                ConfiguracionDTO confProcesarValidacionesSolicitudes = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_VALIDACIONES_SOLICITUDES);
                bool activoProcTicketCombustionVisitas = bool.Parse(confProcesarValidacionesVisitas.Valor);
                bool activoProcTicketCombustionSolicitudes = bool.Parse(confProcesarValidacionesSolicitudes.Valor);

                if ( (
                        //--> 20210924 - BUA. TEMPORARMENTE PONEMOS ESTA VALICACION PARA QUE NO COMPRUEBE EL TIPO DE DOCUMENTO PARA LAS SOLICITUDES(HASTA QUE SE HAGA EL DESARROLLO).
                        ((requesTicketCombustiontDTO.CodigoVisita != null && requesTicketCombustiontDTO.CodigoVisita > 0 && activoProcTicketCombustionVisitas) || (requesTicketCombustiontDTO.IdSolicitud != null && requesTicketCombustiontDTO.IdSolicitud > 0 && activoProcTicketCombustionSolicitudes))
                        &&
                        (pNombreCampoFichero == "NombreFichero" && (idTipoDocumento != (int)Enumerados.TipoDocumentoAnexarfichero.InformesMantenimientoGAS && idTipoDocumento != 3))
                     )
                    || (pNombreCampoFichero == "NombreFicheroConductoHumos" && (idTipoDocumento != (int)Enumerados.TipoDocumentoAnexarfichero.ConductoHumos)))
                {
                    return "_TipoDocumentoIncorrecto";
                }


                //Comprobamos que la extension del fichero sea la correcta.
                if (nombreFichero.ToUpper().IndexOf(".PDF") == -1 && nombreFichero.ToUpper().IndexOf(".JPG") == -1 && nombreFichero.ToUpper().IndexOf(".JPEG") == -1 && nombreFichero.ToUpper().IndexOf(".TIFF") == -1)
                    return "_FormatoIncorrecto";


                //Comprobamos que el tipo de documento sea correcto
                // Kintell 09/03/2021 Si es GC, TermostatoInteligente o Revision por precinte, el formato del nombre del fichero es diferente, por lo que hay que sacar los datos de otra forma.
                idTipoDocumento = 0;
                string nombreficheroPRO = nombreFichero.Trim();
                if (!string.IsNullOrEmpty(SUBTIPO_SOLICITUD))
                {
                    if (
                        int.Parse(SUBTIPO_SOLICITUD) == (int)Enumerados.SubtipoSolicitud.GasConfort
                           || int.Parse(SUBTIPO_SOLICITUD) == (int)Enumerados.SubtipoSolicitud.InstalacionTermostatoInteligente
                           || int.Parse(SUBTIPO_SOLICITUD) == (int)Enumerados.SubtipoSolicitud.RevisionPorPrecinte)
                    {
                        idTipoDocumento = 0;
                        //Contruimos el nombre de fichero
                        nombreficheroPRO = nombreFichero.Trim();
                        nombreficheroPRO = nombreficheroPRO.Replace("/n", "");
                        nombreficheroPRO = nombreficheroPRO.Replace("/t", "");
                    }
                    else
                    {
                        idTipoDocumento = Documento.ObtenerIdTipoDocumento(TipoDocumentoSinExtension);
                        //Contruimos el nombre de fichero
                        nombreficheroPRO = requesTicketCombustiontDTO.CodigoContrato.ToString() + "_" + DateTime.Now.ToString("yyyyMMdd") + "_" + requesTicketCombustiontDTO.Proveedor.Substring(0, 3) + "_" + TipoDocumentoSinExtension;
                    }
                }
                else
                {
                    idTipoDocumento = Documento.ObtenerIdTipoDocumento(TipoDocumentoSinExtension);
                    //Contruimos el nombre de fichero
                    nombreficheroPRO = requesTicketCombustiontDTO.CodigoContrato.ToString() + "_" + DateTime.Now.ToString("yyyyMMdd") + "_" + requesTicketCombustiontDTO.Proveedor.Substring(0, 3) + "_" + TipoDocumentoSinExtension;
                }

                //if (idTipoDocumento == -1)
                //    return "_FormatoIncorrecto";

                
                // Añadimos la extension.
                if (nombreFichero.ToUpper().IndexOf(".PDF") >= 0)
                    nombreficheroPRO = nombreficheroPRO + ".pdf";
                else
                    nombreficheroPRO = nombreficheroPRO + ".tiff";

                //Comprobamos que no exista un fichero con ese nombre en la BBDD.
                //20210310 BGN/Kintell Comprobamos que el fichero no exista ya para la misma solicitud o visita, porque pueden mandarnos el mismo fichero al cerrar visita y solicitud de averia a la vez
                //Paco: "cuando hacen la avería si la dejan reparada y el mantenimiento está abierto la app se lo dice y aprovechan para hacerlo"
                DocumentoDTO docExistente = Documento.ObtenerPorNombreDocumento(requesTicketCombustiontDTO.CodigoContrato, requesTicketCombustiontDTO.IdSolicitud, requesTicketCombustiontDTO.CodigoVisita, nombreficheroPRO);
                if (docExistente!=null)
                    return "_YaExisteEnBBDD";

            }

            return string.Empty;
        }

        private static bool ExisteSolicitudAveria(TicketCombustionDTO requesTicketCombustiontDTO, ref string excepcionTipoAnomalia, ref string pIdSolicitudAveria, ref string tipoErroraDevolver)
        {
            //string tipoAnomalia = string.Empty;

            //Buscar si existe una solicitud de tipo averia y en estado "Presupuesto pendiente de Cliente"
            //001 Avería Mantenimiento de Gas
            //012 Avería Gas Confort
            SolicitudDB solicitudDB = new SolicitudDB();
            DataTable dtSolicitud = null;

            bool isSolAveriaCreada = false;
            bool isEstadoPresupuestoPresentado = false;

            string idSol = string.Empty;
            string idSolAveriaTicket = string.Empty; //id solicitud que viene a traves del ws o a traves del formulario de ticket de combustion
            string idSolicitudAveria = string.Empty; //Id solicitud que se obtiene de la tabla de solicitudes.

            //Recuperamos la solicitud si nos viene informado en el web service el campo "IdSolicitudAveria", si no viene informado lo vamos a buscar la solicitud.
            if (requesTicketCombustiontDTO.IdSolicitudAveria != null && requesTicketCombustiontDTO.IdSolicitudAveria > 0)
            {
                SolicitudesDB objSolicitudesDB = new SolicitudesDB();
                DataSet dsSolicitud = objSolicitudesDB.GetSolicitudesPorIDSolicitud(requesTicketCombustiontDTO.IdSolicitudAveria.ToString(), 1);

                if (dsSolicitud != null && dsSolicitud.Tables.Count > 0 && dsSolicitud.Tables[0].Rows.Count > 0)
                {
                    dtSolicitud = dsSolicitud.Tables[0];
                    idSolAveriaTicket = dtSolicitud.Rows[0]["id_solicitud"].ToString();
                }
                else
                    idSolAveriaTicket = requesTicketCombustiontDTO.IdSolicitudAveria.ToString();

            }

            //si no mandan a traves del ws el id de solicitud que han creado vamos a buscar si existe un solicitude de tipo averia.
            //if (dtSolicitud == null)
            //{
            string subTipoSol = (requesTicketCombustiontDTO.EsGasConfort ? StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.AveriaGasConfort) : StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.AveriaMantenimientodeGas));
            DataTable dtSolicitudAveria = solicitudDB.ObtenerSolicitudesPorContratoYSubTipoSolicitud(requesTicketCombustiontDTO.CodigoContrato
                                                                                    , subTipoSol
                                                                                    , 0 //Que no sea un estado final
                                                                                    , 1);

            if (dtSolicitudAveria != null && dtSolicitudAveria.Rows.Count > 0)
                idSolicitudAveria = dtSolicitudAveria.Rows[0]["id_solicitud"].ToString();
            //}

            //Si viene informado el IdSolicitudAveria del ticket(ya venga del ws o del formulario del ticket) se verifican que sea el mismo.
            //Si no es el mismo es que no coincide con el id de la solicitud de averia creada y el id de solicitud proporcionado.
            if ((!string.IsNullOrEmpty(idSolAveriaTicket) && !string.IsNullOrEmpty(idSolicitudAveria)) && idSolAveriaTicket != idSolicitudAveria)
            {
                excepcionTipoAnomalia += "_Id_Solicitud_Proporcionado_No_Correcto";
                tipoErroraDevolver = "ERROR";
                return true;
            }

            if (string.IsNullOrEmpty(idSolAveriaTicket) && !string.IsNullOrEmpty(idSolicitudAveria)) //Si no nos envian el la solicitud de averia, utilizamos el id de solicitud de averia que obtenemos nosotros, si existe claro.
                dtSolicitud = dtSolicitudAveria;
            else if (string.IsNullOrEmpty(idSolicitudAveria) && !string.IsNullOrEmpty(idSolAveriaTicket)) //Si NO existe el id de solicitud de averia que obtenemos nosotros(Que se verifica previamente) se crea la solicitud correcta de averia, 
                                                                                                            //ya que el id que nos han enviado no es una solicitude de averia.
                dtSolicitud = null;


            if (dtSolicitud != null && dtSolicitud.Rows.Count > 0)
            {
                isSolAveriaCreada = true;

                string estadoSol = dtSolicitud.Rows[0]["Estado_solicitud"].ToString();
                idSol = dtSolicitud.Rows[0]["id_solicitud"].ToString();

                isEstadoPresupuestoPresentado = (estadoSol == StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.PresupuestopendientedeCliente) ? true : false);

                if (!isEstadoPresupuestoPresentado)
                {
                    excepcionTipoAnomalia += "_Avanzar_Presupuesto_Presentado";
                    //tipoErroraDevolver = "AVISO";
                }
                else
                    tipoErroraDevolver = "TODOCORRECTO"; //

                pIdSolicitudAveria = idSol;
            }

            return isSolAveriaCreada;
        }

        private static bool ComentariosInformadoCorrectamente(TicketCombustionDTO requesTicketCombustiontDTO)
        {
            //En principo solo comprobamos que venga algo el campo comentarios, en un futuro puede que haya que comprobar algun texto en concreto
            bool isComentarioInformado = false;
            object valCampoComentarios = null;
            //string excepcionTipoAnomalia = string.Empty;

            valCampoComentarios = requesTicketCombustiontDTO.Comentarios;

            if (valCampoComentarios != null && !string.IsNullOrEmpty(valCampoComentarios.ToString()))
                isComentarioInformado = true;
            //else
            //    excepcionTipoAnomalia = "No_Justificado";

            return isComentarioInformado;
        }

        //20210624 BUA ADD R#31134: Excepciones procesamiento peticiones Ticket Combustion
        private static string CrearSolicitud(TicketCombustionDTO ticketCombustiontDTO
                                            //, PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO
                                            , string descErrorAnomalia
                                            , string usuario)
        {
            string id_solicitud = string.Empty;

            try
            {
                Solicitud solicitud = new Solicitud();
                SolicitudesDB objSolicitudesDB = new SolicitudesDB();

                string observaciones_Cerrar = string.Empty;
                string observaciones_Crear = string.Empty;
                string observaciones_Nuevas = string.Empty;
                string codSubTipoSol = string.Empty;
                string codEstadoSol = string.Empty;
                string descSubTipoSol = string.Empty;
                string emailCodContrato = string.Empty;
                string emailcodVisitaSol = string.Empty;


                //Obtenemos la descripcion del error asociado al tipo de anomalia.
                //TicketCombustionAviso enumErrorAnomalia = (TicketCombustionAviso)Enum.Parse(typeof(TicketCombustionAviso), pValidacionesTicketCombustionDTO.NombreCampoRequest + "_FueraRangos_" + tipoAnomalia);
                //string errorAnomalia = StringEnum.GetStringValue(enumErrorAnomalia);

                //if (request.GetType().Name == "CierreSolicitudRequest")
                if (ticketCombustiontDTO.IdSolicitud != null && ticketCombustiontDTO.IdSolicitud > 0)
                {

                }
                else
                {
                    descSubTipoSol = (ticketCombustiontDTO.EsGasConfort ? Enumerados.SubtipoSolicitud.AveriaGasConfort.ToString() : Enumerados.SubtipoSolicitud.AveriaMantenimientodeGas.ToString());                    
                    codSubTipoSol = (ticketCombustiontDTO.EsGasConfort ? StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.AveriaGasConfort) : StringEnum.GetStringValue(Enumerados.SubtipoSolicitud.AveriaMantenimientodeGas));
                    //codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.PresupuestopendientedeCliente); //005
                    codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.Pendientedecontactar); //001

                    //Añadimos el comentario al historico de comentarios
                    observaciones_Crear = "Se crea la solicitud por producirse una anomalia de tipo " + descErrorAnomalia + ", a la hora de procesar el ticket de combustion. ";
                    observaciones_Nuevas = ConstruirHistoricoObservaciones("", observaciones_Crear, usuario);

                    string proveedor = ticketCombustiontDTO.Proveedor.Substring(0, 3);

                    //Generamos la solicitud de averia con el nuevo codigo averia 37 --> Valores incorrectos ticket combustion
                    id_solicitud = objSolicitudesDB.AddSolicitud(ticketCombustiontDTO.CodigoContrato, "001", codSubTipoSol, codEstadoSol, ticketCombustiontDTO.TelefonoContacto1, ticketCombustiontDTO.PersonaContacto, "37", observaciones_Nuevas, proveedor, false, false, false).ToString();

                    //Guardamos en caracteristica el id de la visita que se ha cerrado como visitaErronea
                    objSolicitudesDB.GuardarCaracteristicaWS("188", ticketCombustiontDTO.CodigoVisita.ToString(), int.Parse(id_solicitud));

                    int id_movimiento = solicitud.ActualizarHistoricoSolicitud(ticketCombustiontDTO.CodigoContrato, id_solicitud, "001", usuario, codEstadoSol, observaciones_Nuevas, proveedor, codSubTipoSol, "37", "0", "A");

                    //2. MODIFICAR visita actual. como erronea, cambiar estado a "Errónea"
                    //string cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //13 --> Visita erronea
                    //string observaciones = "Se cierra visita actual como erronea por anomalia " + errorAnomalia + ", a la hora de procesar el ticket de combustion. Se crea solicitud por '" + descSubTipoSol + "'.";

                    //CambiarEstadoVisitaActual(ticketCombustiontDTO
                    //                            , cambioEstadoVisitaActual
                    //                            , observaciones
                    //                            , usuario);

                    emailCodContrato = ticketCombustiontDTO.CodigoContrato;
                    emailcodVisitaSol = "Visita: " + ticketCombustiontDTO.CodigoVisita.ToString();
                }

                //????????????????????????????????????
                //ENVIAR CORREO DE ANOMALIA
                //EnvioCorreoAnomaliaCritica(emailCodContrato, emailcodVisitaSol, descErrorAnomalia);

            }
            catch (Exception ex)
            {
                throw;
            }

            return id_solicitud;
        }

        private static void CambiarEstadoVisitaActual(TicketCombustionDTO ticketCombustiontDTO
                                                //, PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO
                                                //, string tipoAnomalia
                                                , string cambioEstadoVisitaActual
                                                , string observaciones
                                                , string usuario)
        {
            if (!string.IsNullOrEmpty(cambioEstadoVisitaActual))
            {
                Visitas visitas = new Visitas();
                VisitaDTO visitaDTO = null;

                visitaDTO = visitas.DatosVisitasWS(ticketCombustiontDTO.CodigoContrato, ticketCombustiontDTO.CodigoVisita.ToString(), ticketCombustiontDTO.Proveedor);

                if (visitaDTO != null)
                {
                    //Obtenemos la descripcion del error asociado al tipo de anomalia.
                    //TicketCombustionError enumErrorAnomalia = (TicketCombustionError)Enum.Parse(typeof(TicketCombustionError), pValidacionesTicketCombustionDTO.NombreCampoRequest + "_FueraRangos_" + tipoAnomalia);
                    //string errorAnomalia = StringEnum.GetStringValue(enumErrorAnomalia);

                    //visitaDTO.CodigoEstadoVisita = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //13 --> Visita erronea
                    //string observaciones_Cerrar = "Se cierra visita actual como erronea por anomalia " + errorAnomalia + ", a la hora de procesar el ticket de combustion. Se crea solicitud por '" + "subtiposol" + "'.";

                    visitaDTO.CodigoEstadoVisita = cambioEstadoVisitaActual;
                    visitaDTO.Observaciones = observaciones;
                    visitaDTO.TipoVisita = ticketCombustiontDTO.TipoVisita;
                    visitaDTO.FechaVisita = null;

                    Visitas.ActualizarDatosVisitaYVisitaHistoricoWS(visitaDTO, usuario);
                }
            }
        }

        //20210624 BUA END R#31134: Excepciones procesamiento peticiones Ticket Combustion
        #endregion Private Methods

        #region Public Methods

        /// <summary>
        /// Obtiene informacion extra relacionado con el ticket de combustion cuando se produce una anomalia critica.
        /// </summary>
        /// <param name="idSolicitud"></param>
        /// <returns>Lista de PValidacionesTicketCombustionDTO con todos los objetos</returns>
        public static DataTable ObtenerInformacionExtraAsociadaTicketCombustion(Int64 idSolicitud)
        {
            PValidacionesTicketCombustionDB pValidacionesTicketCombustionDB = new PValidacionesTicketCombustionDB();
            return pValidacionesTicketCombustionDB.ObtenerInformacionExtraAsociadaTicketCombustion(idSolicitud);
        }


        /// <summary>
        /// Obtiene los PValidacionesTicketCombustionDTO que cumple con el criterio
        /// </summary>
        /// <param name="tipoPeticion"></param>
        /// <returns>Lista de PValidacionesTicketCombustionDTO con todos los objetos</returns>
        public static List<PValidacionesTicketCombustionDTO> ObtenerTodosPorTipoPeticion(string tipoPeticion)
        {
            PValidacionesTicketCombustionDB pValidacionesTicketCombustionDB = new PValidacionesTicketCombustionDB();
            return pValidacionesTicketCombustionDB.ObtenerTodosPorTipoPeticion(tipoPeticion);
        }

        /// <summary>
        /// Se realiza la validación de los datos de entrada del ticket de combustion.
        /// </summary>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <returns>Devolvemos si pasa las validaciones</returns>
        public static Boolean ValidarDatosEntradaTicketCombustion(TicketCombustionDTO requesTicketCombustiontDTO
                                                                    , WSResponse response
                                                                    , string pTipoRequest
                                                                    , string usuario
                                                                    , string SUBTIPO_SOLICITUD
                                                                    , string excepcionValidacion)
        {
            bool isAnomalia = false;
            string tipoAnomalia = string.Empty;

            //string usuario = usuarioDTO.Login;
            //bool isAdmin = usuarioDTO.Id_Perfil == 4;

            //1- Validamos que todos los campos obligatorios vengan informados
            //Obtenemos la correlacion de las caracteristicas con los campos de la request obligatorios.
            List<PValidacionesTicketCombustionDTO> lPValidacionesObligatoriosTicketCombustionDTO = PValidacionesTicketCombustion.ObtenerTodosPorTipoPeticion(pTipoRequest);

            foreach (PValidacionesTicketCombustionDTO pValidacionesObligatoriosTicketCombustionDTO in lPValidacionesObligatoriosTicketCombustionDTO)
            {
                if (pValidacionesObligatoriosTicketCombustionDTO.Obligatorio == true)
                {
                    if (requesTicketCombustiontDTO.GetType().GetProperty(pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest) != null)
                    {
                        Object objValor = requesTicketCombustiontDTO.GetType().GetProperty(pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest).GetValue(requesTicketCombustiontDTO, null);

                        string nombreCampo = pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest;

                        tipoAnomalia = string.Empty;

                        if (objValor == null || string.IsNullOrEmpty(objValor.ToString()))
                        {
                            tipoAnomalia = "_NoInformado";
                        }
                        //else
                        //{
                        //    //Realizamos varias comprobaciones sobre el nombre fichero
                        //    if (pValidacionesObligatoriosTicketCombustionDTO.Anomalia == "ComprobacionesVariasNombreFichero")
                        //    { 
                        //        tipoAnomalia = ComprobacionesVariasSobreNombreFichero(requesTicketCombustiontDTO
                        //                                                                , pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest.ToString()
                        //                                                                ,SUBTIPO_SOLICITUD);
                        //    }

                        //    //Realizamos varias comprobaciones sobre el fichero
                        //    if (string.IsNullOrEmpty(tipoAnomalia) && pValidacionesObligatoriosTicketCombustionDTO.Anomalia == "ComprobacionesVariasFichero")
                        //    {
                        //        ComprobacionesVariasSobreFichero(requesTicketCombustiontDTO
                        //                                        , pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest.ToString());
                        //    }

                        //}

                        //Si

                        if (pValidacionesObligatoriosTicketCombustionDTO.Anomalia == "ComprobacionesVariasNombreFichero"
                            || pValidacionesObligatoriosTicketCombustionDTO.Anomalia == "ComprobacionesVariasFichero")
                        {
                            string excepcion = "NoValidarDocumento_" + (nombreCampo.Contains("ConductoHumos") ? "ConductoHumos" : "TicketCombustion") + "_PerfilAdministradorFormularioEdicion";

                            //Si es perfil administrador y viene de formulario de edicion no se le obliga a insertar los documentos.
                            if (tipoAnomalia == "_NoInformado" && (excepcionValidacion == "NoValidarDocumento_Todos_PerfilAdministradorFormularioEdicion"
                                || excepcionValidacion == excepcion))
                                tipoAnomalia = string.Empty;
                            ///*
                            else
                            {
                                //Realizamos varias comprobaciones sobre el nombre fichero
                                //if (string.IsNullOrEmpty(tipoAnomalia) && pValidacionesObligatoriosTicketCombustionDTO.Anomalia == "ComprobacionesVariasNombreFichero")
                                //{
                                //    tipoAnomalia = ComprobacionesVariasSobreNombreFichero(requesTicketCombustiontDTO
                                //                                                            , pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest.ToString()
                                //                                                            , SUBTIPO_SOLICITUD);
                                //}

                                ////Realizamos varias comprobaciones sobre el fichero
                                //if (string.IsNullOrEmpty(tipoAnomalia) && pValidacionesObligatoriosTicketCombustionDTO.Anomalia == "ComprobacionesVariasFichero")
                                //{
                                //    tipoAnomalia = ComprobacionesVariasSobreFichero(requesTicketCombustiontDTO
                                //                                                    , pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest.ToString());
                                //}
                            }
                            //*/
                        }

                        if (!string.IsNullOrEmpty(tipoAnomalia))
                        {
                            TicketCombustionError error = (TicketCombustionError)Enum.Parse(typeof(TicketCombustionError), pValidacionesObligatoriosTicketCombustionDTO.NombreCampoRequest + tipoAnomalia);

                            response.AddError(error);

                            return false;
                        }
                    }
                }
            }

            //2. Validamos que los datos se encuentren dentro de los rangos establecidos en la tabla P_VALIDACIONES_TICKET_COMBUSTION y ejecuta las acceones necesarias.
            List<PValidacionesTicketCombustionDTO> lPValidacionesTicketCombustionDTO = PValidacionesTicketCombustion.ObtenerTodosPorTipoPeticion(pTipoRequest);

            try
            {
                ConfiguracionDTO confProcesarValidacionesVisitas = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_VALIDACIONES_VISITAS);
                ConfiguracionDTO confProcesarValidacionesSolicitudes = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_VALIDACIONES_SOLICITUDES);
                bool activoProcTicketCombustionVisitas = bool.Parse(confProcesarValidacionesVisitas.Valor);
                bool activoProcTicketCombustionSolicitudes = bool.Parse(confProcesarValidacionesSolicitudes.Valor);

                if ((requesTicketCombustiontDTO.CodigoVisita != null && requesTicketCombustiontDTO.CodigoVisita > 0 &&  activoProcTicketCombustionVisitas)
                    || (requesTicketCombustiontDTO.IdSolicitud != null && requesTicketCombustiontDTO.IdSolicitud > 0 && activoProcTicketCombustionSolicitudes))
                {
                    string descErrorAnomalia = string.Empty;
                    string descErrorAnomaliaOrigen = string.Empty;
                    string tipoErrorADevolver = string.Empty;
                    string tipoErrorADevolverOrigen = string.Empty;
                    string idSolicitudAveria = string.Empty;
                    string cambioEstadoVisitaActual = string.Empty;
                    string excepcionTipoAnomalia = string.Empty;
                    string descTipoAnomalia = string.Empty;
                    string descTipoAnomaliaOrigen = string.Empty;
                    bool bCrearSolicitudAveria = false;
                    bool bEnviarCorreoTrasAnomalia = false;
                    bool bExisteSolAveria = false;
                    bool bSaltarExcepcionPrioritaria = false;
                    bool isAnomaliaPrioritaria = false;

                    foreach (PValidacionesTicketCombustionDTO pValidacionesTicketCombustionDTO in lPValidacionesTicketCombustionDTO)
                    {
                        if (pValidacionesTicketCombustionDTO.Activo == true)
                        {
                            //Inicializamos los campos
                            descErrorAnomalia = string.Empty;
                            descErrorAnomaliaOrigen = string.Empty;
                            tipoErrorADevolver = string.Empty;
                            tipoErrorADevolverOrigen = string.Empty;
                            idSolicitudAveria = string.Empty;
                            cambioEstadoVisitaActual = string.Empty;
                            excepcionTipoAnomalia = string.Empty;
                            descTipoAnomalia = string.Empty;
                            descTipoAnomaliaOrigen = string.Empty;
                            bCrearSolicitudAveria = false;
                            bEnviarCorreoTrasAnomalia = false;
                            bExisteSolAveria = false;
                            bSaltarExcepcionPrioritaria = false;

                            if (requesTicketCombustiontDTO.GetType().GetProperty(pValidacionesTicketCombustionDTO.NombreCampoRequest) != null)
                            {
                                //Recuperamos el valor del campo que se esta procesando
                                object objValor = requesTicketCombustiontDTO.GetType().GetProperty(pValidacionesTicketCombustionDTO.NombreCampoRequest).GetValue(requesTicketCombustiontDTO, null);

                                if (pValidacionesTicketCombustionDTO.Obligatorio == false && (objValor == null || string.IsNullOrEmpty(objValor.ToString())))
                                {
                                }
                                else
                                {
                                    bool EsPValDependienteCampoRequest = EsPValDependienteDeValorRequest(requesTicketCombustiontDTO, pValidacionesTicketCombustionDTO);

                                    tipoAnomalia = string.Empty;

                                    if (pValidacionesTicketCombustionDTO.Dependecia == null ||
                                        (pValidacionesTicketCombustionDTO.Dependecia != null && EsPValDependienteCampoRequest == true))
                                    {
                                        string cuandoEjecutaAnomalia = string.Empty;
                                        string anomalia = string.Empty;

                                        object objPValAnomalia = pValidacionesTicketCombustionDTO.Anomalia;

                                        if (objPValAnomalia != null)
                                        {
                                            anomalia = objPValAnomalia.ToString();

                                            if (anomalia.Contains("@") || anomalia.Contains(':'))
                                            {
                                                if (anomalia.Contains("@"))
                                                {
                                                    cuandoEjecutaAnomalia = anomalia.Split('@')[0];
                                                    anomalia = anomalia.Split('@')[1];
                                                }

                                                if (anomalia.Contains(':'))
                                                {
                                                    tipoAnomalia = anomalia.Split(':')[1];
                                                    anomalia = anomalia.Split(':')[0];
                                                }

                                                //Aqui se mira que el valor cumpla las validaciones de rangos establecido.
                                                bool bEjecutaAnomalia = SeTieneQueEjecutarAnomalia(requesTicketCombustiontDTO, pValidacionesTicketCombustionDTO, cuandoEjecutaAnomalia, ref tipoAnomalia);

                                                //Si no se superan las validaciones se realizan las acciones necesarias y se devuelve el error detectado.
                                                if (bEjecutaAnomalia && !string.IsNullOrEmpty(anomalia))
                                                {
                                                    isAnomalia = true;
                                                    object valCampoComentarios = null;
                                                    bool bComentarioInformadoCorrectamente = false;

                                                    excepcionTipoAnomalia = tipoAnomalia; //Inicializamos el tipo de anomalia                                                   
                                                    tipoErrorADevolver = "ERROR"; //Inicializamos a tipo de error a "ERROR"

                                                    switch (tipoAnomalia)
                                                    {
                                                        case "Anomalia_Secundaria":
                                                        case "Defecto_Principal":
                                                            isAnomalia = ProcesarAccionesTrasAnomalia(//request,
                                                                                                        requesTicketCombustiontDTO
                                                                                                        , pValidacionesTicketCombustionDTO
                                                                                                        , tipoAnomalia
                                                                                                        , usuario);
                                                            tipoErrorADevolver = "AVISO";

                                                            break;
                                                        case "Excepcion_Comentarios_Informado":
                                                            //Si no se superan las validaciones pero si viene informado el campo comentarios se da como justificado y no se considera que haya una anomalia.
                                                            //object valCampoComentarios = request.GetType().GetProperty("Comentarios").GetValue(request, null);
                                                            valCampoComentarios = requesTicketCombustiontDTO.Comentarios;

                                                            if (valCampoComentarios != null && !string.IsNullOrEmpty(valCampoComentarios.ToString()))
                                                                isAnomalia = false;
                                                            else
                                                                excepcionTipoAnomalia = "No_Justificado";

                                                            break;

                                                        //20210624 BUA ADD R#31134: Excepciones procesamiento peticiones Ticket Combustion
                                                        case "Excepcion_AnomaliaSecundaria":                                                            
                                                            if (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.ANOMALIASECUNDARIA))
                                                            {
                                                                tipoErrorADevolver = "AVISO"; //Inicializamos como si fuera a ser un aviso

                                                                //Comprobamos que exista la solicitud de averia y en el parametro devolvemos si se encuentra en el estado "Presupuesto pendiente de Cliente"
                                                                bExisteSolAveria = ExisteSolicitudAveria(requesTicketCombustiontDTO, ref excepcionTipoAnomalia, ref idSolicitudAveria, ref tipoErrorADevolver);

                                                                if (tipoErrorADevolver == "AVISO")
                                                                {
                                                                    if (!bExisteSolAveria)
                                                                        bCrearSolicitudAveria = true;

                                                                    cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //013 --> Visita erronea
                                                                    bEnviarCorreoTrasAnomalia = true;
                                                                }
                                                                else if (tipoErrorADevolver == "TODOCORRECTO")
                                                                    isAnomalia = false;

                                                            }


                                                            if (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.VISITASINANOMALIACONVALORESFUERADERANGO))
                                                            {
                                                                //si viene informado el campo comentarios se considera que esta justificada la anomalia
                                                                bComentarioInformadoCorrectamente = ComentariosInformadoCorrectamente(requesTicketCombustiontDTO);

                                                                if (bComentarioInformadoCorrectamente)
                                                                    isAnomalia = false;
                                                                else
                                                                {
                                                                    tipoErrorADevolver = "AVISO";
                                                                    cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //013 --> Visita erronea
                                                                    excepcionTipoAnomalia = "No_Justificado";
                                                                }
                                                            }

                                                                break;
                                                        case "Excepcion_DefectoPrincipal":
                                                            if (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.PRECINTADODEINSTALACION))
                                                            {
                                                                tipoErrorADevolver = "AVISO"; //Inicializamos como si fuera a ser un aviso

                                                                //Comprobamos que exista la solicitud de averia y en el parametro devolvemos si se encuentra en el estado "Presupuesto pendiente de Cliente"                                         
                                                                bExisteSolAveria = ExisteSolicitudAveria(requesTicketCombustiontDTO, ref excepcionTipoAnomalia, ref idSolicitudAveria, ref tipoErrorADevolver);

                                                                if (tipoErrorADevolver == "AVISO")
                                                                {
                                                                    if (!bExisteSolAveria)
                                                                        bCrearSolicitudAveria = true;

                                                                    cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //013 --> Visita erronea
                                                                    bEnviarCorreoTrasAnomalia = true;
                                                                }
                                                                else if (tipoErrorADevolver == "TODOCORRECTO")
                                                                    isAnomalia = false;

                                                            }

                                                            break;
                                                        case "Excepcion_ValoresFueraDeRangoJustificados":
                                                            if (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.VISITASINANOMALIACONVALORESFUERADERANGO))
                                                            {
                                                                //si viene informado el campo comentarios se considera que esta justificada la anomalia
                                                                bComentarioInformadoCorrectamente = ComentariosInformadoCorrectamente(requesTicketCombustiontDTO);

                                                                if (bComentarioInformadoCorrectamente)
                                                                    isAnomalia = false;
                                                                else
                                                                {
                                                                    tipoErrorADevolver = "AVISO";
                                                                    cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //013 --> Visita erronea
                                                                    excepcionTipoAnomalia = "No_Justificado";
                                                                }
                                                            }
                                                            else
                                                                excepcionTipoAnomalia = string.Empty;


                                                            break;
                                                        case "Excepcion_ValoresFueraDeRangoJustificados_GeneraAveria":
                                                            if (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.VISITASINANOMALIACONVALORESFUERADERANGO))
                                                            {
                                                                //si viene informado el campo comentarios se considera que esta justificada la anomalia
                                                                bComentarioInformadoCorrectamente = ComentariosInformadoCorrectamente(requesTicketCombustiontDTO);

                                                                if (bComentarioInformadoCorrectamente)
                                                                    isAnomalia = false;
                                                                else
                                                                {
                                                                    tipoErrorADevolver = "AVISO";
                                                                    cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //013 --> Visita erronea
                                                                    excepcionTipoAnomalia = "No_Justificado";
                                                                    //Si no existe la solicitud de averia la creamos
                                                                    //bCrearSolicitudAveria = true; //No esta claro que haya que crear la solitud
                                                                }
                                                            }
                                                            else
                                                                excepcionTipoAnomalia = string.Empty;

                                                            break;
                                                        case "Excepcion_FueraRango_PermitidoCerrar":
                                                            tipoErrorADevolver = "AVISO";
                                                            excepcionTipoAnomalia = "No_Justificado_PermitidoCerrar";

                                                            break;
                                                    }

                                                    if (isAnomalia)
                                                    {
                                                        descTipoAnomalia = pValidacionesTicketCombustionDTO.NombreCampoRequest + "_FueraRangos" + (excepcionTipoAnomalia != "" ? "_" + excepcionTipoAnomalia : "");

                                                        //Si se produce una anomalia cortamos el procesamiento del resto de campos.
                                                        break;
                                                    }
                                                    //20210624 BUA END R#31134: Excepciones procesamiento peticiones Ticket Combustion
                                                }
                                            }
                                        }
                                    }

                                    //Hacemos varias comprobacion a nivel del nombre de fichero y el fichero como tal.
                                    if (pValidacionesTicketCombustionDTO.Anomalia == "ComprobacionesVariasNombreFichero"
                                        || pValidacionesTicketCombustionDTO.Anomalia == "ComprobacionesVariasFichero")
                                    {
                                        //Inicializamos la excepcion si viene del formulario de edicion del ticket.
                                        string excepcion = "NoValidarDocumento_" + (pValidacionesTicketCombustionDTO.NombreCampoRequest.Contains("ConductoHumos") ? "ConductoHumos" : "TicketCombustion") + "_PerfilAdministradorFormularioEdicion";

                                        //Si es perfil administrador y viene de formulario de edicion no se le obliga a insertar los documentos.
                                        if (excepcionValidacion == "NoValidarDocumento_Todos_PerfilAdministradorFormularioEdicion"
                                            || excepcionValidacion == excepcion)
                                            descTipoAnomalia = string.Empty;
                                        else
                                        {
                                            //Realizamos varias comprobaciones sobre el nombre fichero
                                            if (pValidacionesTicketCombustionDTO.Anomalia == "ComprobacionesVariasNombreFichero")
                                            {
                                                descTipoAnomalia = ComprobacionesVariasSobreNombreFichero(requesTicketCombustiontDTO
                                                                                                            , pValidacionesTicketCombustionDTO.NombreCampoRequest.ToString()
                                                                                                            , SUBTIPO_SOLICITUD);
                                            }

                                            //Realizamos varias comprobaciones sobre el fichero
                                            if (pValidacionesTicketCombustionDTO.Anomalia == "ComprobacionesVariasFichero")
                                            {
                                                descTipoAnomalia = ComprobacionesVariasSobreFichero(requesTicketCombustiontDTO
                                                                                                    , pValidacionesTicketCombustionDTO.NombreCampoRequest.ToString());
                                            }
                                        }

                                        if (!string.IsNullOrEmpty(descTipoAnomalia))
                                        {
                                            isAnomalia = true;
                                            tipoErrorADevolver = "ERROR";
                                            descTipoAnomalia = pValidacionesTicketCombustionDTO.NombreCampoRequest + descTipoAnomalia;
                                            bSaltarExcepcionPrioritaria = true;

                                            //Si se produce una anomalia cortamos el procesamiento del resto de campos.
                                            break;
                                        }
                                    }


                                }
                            }
                        }
                    }

                    //20211011 BUA ADD R#34195 - Ticket de combustión priorización anomalía principal o secundaria
                    //Si se produce una anomalia de tipo error pero en el campo TipoVisita viene clasificada como ANOMALIA SECUNDARIA o PRECINTADO DE INSTALACIÓN
                    //Convertimos el error en aviso y se procesa como si realmente hubiese sido un aviso. Esto provoca que se cierre la visita como erronea
                    // y se compruebe/genere la averia correspondiente.
                    if (!bSaltarExcepcionPrioritaria && (tipoErrorADevolver == "ERROR" //Una vez validado el ticket de combustion se ha considerado que es un error por no superar las validaciones
                    || string.IsNullOrEmpty(tipoErrorADevolver)) //una vez procesado el ticket de combustion y se han superado todas las validaciones
                    && (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.PRECINTADODEINSTALACION)
                        || requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.ANOMALIASECUNDARIA))
                    )
                    {
                        descTipoAnomaliaOrigen = descTipoAnomalia; //Guardamos el tipo de anomalia original
                        tipoErrorADevolverOrigen = tipoErrorADevolver;

                        tipoErrorADevolver = "AVISO"; //Inicializamos como si fuera a ser un aviso
                        isAnomalia = true;
                        isAnomaliaPrioritaria = true;

                        //Comprobamos que exista la solicitud de averia y en el parametro devolvemos si se encuentra en el estado "Presupuesto pendiente de Cliente"                                         
                        bExisteSolAveria = ExisteSolicitudAveria(requesTicketCombustiontDTO, ref excepcionTipoAnomalia, ref idSolicitudAveria, ref tipoErrorADevolver);

                        if (tipoErrorADevolver == "AVISO")
                        {
                            if (!bExisteSolAveria)
                                bCrearSolicitudAveria = true;

                            cambioEstadoVisitaActual = StringEnum.GetStringValue(Enumerados.EstadosVisita.visitaErronea); //013 --> Visita erronea
                            bEnviarCorreoTrasAnomalia = true;

                            if (requesTicketCombustiontDTO.TipoVisita == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.PRECINTADODEINSTALACION))
                                descTipoAnomalia = "AnomaliaPrincipalPrioritariaDetectada";
                            else
                                descTipoAnomalia = "AnomaliaSecundariaPrioritariaDetectada";
                        }
                        else if (tipoErrorADevolver == "TODOCORRECTO")
                            isAnomalia = false;

                    }
                    //20211011 BUA END R#34195 - Ticket de combustión priorización anomalía principal o secundaria

                    if (isAnomalia)
                    {
                        if (tipoErrorADevolver == "ERROR")
                        {
                            TicketCombustionError error = (TicketCombustionError)Enum.Parse(typeof(TicketCombustionError), descTipoAnomalia);

                            response.AddError(error);

                            descErrorAnomalia = StringEnum.GetStringValue(error);
                        }
                        else if (tipoErrorADevolver == "AVISO")
                        {
                            TicketCombustionAviso aviso = (TicketCombustionAviso)Enum.Parse(typeof(TicketCombustionAviso), descTipoAnomalia);

                            response.AddAviso(aviso);

                            descErrorAnomalia = StringEnum.GetStringValue(aviso);

                            descErrorAnomalia +=  (isAnomaliaPrioritaria ? " PRIORITARIA" : string.Empty);

                            //Recuperamos la anomalia original si existe.
                            if (!string.IsNullOrEmpty(descTipoAnomaliaOrigen))
                            {
                                if (tipoErrorADevolverOrigen == "ERROR")
                                    descErrorAnomaliaOrigen = StringEnum.GetStringValue((TicketCombustionError)Enum.Parse(typeof(TicketCombustionError), descTipoAnomaliaOrigen));
                                else if (tipoErrorADevolverOrigen == "AVISO")
                                    descErrorAnomaliaOrigen = StringEnum.GetStringValue((TicketCombustionAviso)Enum.Parse(typeof(TicketCombustionAviso), descTipoAnomaliaOrigen));
                            }
                            else
                                descErrorAnomaliaOrigen = descErrorAnomalia;
                        }

                        //ACCIONES A REALIZAR TRAS LA ANOMALIA DETECTADA
                        //1. CREAR SOLICITUD
                        if (bCrearSolicitudAveria)
                            idSolicitudAveria = CrearSolicitud(requesTicketCombustiontDTO, descErrorAnomalia, usuario);
                        else if (bExisteSolAveria && tipoErrorADevolver == "AVISO")
                        {
                            if (requesTicketCombustiontDTO.CodigoVisita != null && requesTicketCombustiontDTO.CodigoVisita > 0)
                            {
                                CaracteristicaHistoricoDB caracteristicaHistoricoDB = new CaracteristicaHistoricoDB();
                                string idSolAveriaCarac = caracteristicaHistoricoDB.GetCaracteristicaNumeroSolicitudByCodContratoCodVisitaAndTipCar(requesTicketCombustiontDTO.CodigoContrato, int.Parse(requesTicketCombustiontDTO.CodigoVisita.ToString()), "188");

                                if (idSolicitudAveria != idSolAveriaCarac)
                                {
                                    //Guardamos en caracteristica el id de la visita
                                    SolicitudesDB objSolicitudesDB = new SolicitudesDB();
                                    objSolicitudesDB.GuardarCaracteristicaWS("188", requesTicketCombustiontDTO.CodigoVisita.ToString(), int.Parse(idSolicitudAveria));
                                }
                            }
                        }

                        //Si la visita tienen una solicitud de averia asociada la guadamos.
                        if (!string.IsNullOrEmpty(idSolicitudAveria) && decimal.Parse(idSolicitudAveria) > 0)
                            requesTicketCombustiontDTO.IdSolicitudAveria = decimal.Parse(idSolicitudAveria);


                        //2. CAMBIAR ESTADO DE LA VISITA
                        if (!string.IsNullOrEmpty(cambioEstadoVisitaActual))
                        {
                            string descSubTipoSol = (requesTicketCombustiontDTO.EsGasConfort ? Enumerados.SubtipoSolicitud.AveriaGasConfort.ToString() : Enumerados.SubtipoSolicitud.AveriaMantenimientodeGas.ToString());
                            string observaciones = "Se cierra visita actual como erronea por anomalia " + descErrorAnomalia + ", a la hora de procesar el ticket de combustion." +
                                (bCrearSolicitudAveria ? " Se crea solicitud por " + descSubTipoSol + "." : string.Empty);

                            CambiarEstadoVisitaActual(requesTicketCombustiontDTO
                                                        , cambioEstadoVisitaActual
                                                        , observaciones
                                                        , usuario);
                        }


                        //3. ENVIAR CORREO DE ANOMALIA
                        if (bEnviarCorreoTrasAnomalia)
                            EnvioCorreoTrasAnomalia(requesTicketCombustiontDTO, descErrorAnomaliaOrigen, isAnomaliaPrioritaria);


                        //4. DEVOLVER SI SE DEBE GUARDAR EL TICKET DE COMBUSTION
                        //Dependiendo del tipo de anomalia, devolvemos un true o un false dependiendo de si se tiene que guardar el ticket de combustion o no.
                        if (tipoErrorADevolver == "ERROR")
                            return false; //Este false es para que NO guarde el ticket de combustion
                        else
                            return true; //Este true es para que se guarde el ticket de combustion
                    }

                }
            }
            catch (Exception ex)
            {
                throw;
            }

            //Si llega a este punto es que si se tiene que guardar el ticket de combustion por haber superado todas las validaciones.
            return true;
        }

        //Metodo para saber si debe tener ticket de combustion en el momento de guardar la visita via web
        public Boolean HayQueProcesarTicketCombustionDesdeWEB_Visita(UsuarioDTO usuarioDTO, string codContrato, string codVisita, int estadoCambiaVisita, ref string msgErrorTicket)
        {
            Visitas visitas = new Visitas();
            VisitaDTO visitasDTO = new VisitaDTO();

            //ConfiguracionDTO confEstadosAntesCambioVisitaOpera = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_VISITAS_A_TRATAR_OPERA);
            ConfiguracionDTO confEstadosVisita = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_VISITAS_A_TRATAR);
            ConfiguracionDTO confProveedores = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_PROVEEDORES_A_TRATAR);
            //ConfiguracionDTO confProcesarValidaciones = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_VALIDACIONES_VISITAS);
            ConfiguracionDTO confActivarFormularioEdicion = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_FORMULARIO_EDICION);


            bool result = false;
            //bool existEstadoAntes = false;
            bool existEstadoDespues = false;
            bool existProveedor = false;
            //bool activoProcTicketCombustion = false;
            bool activoProcFormEdicioinTicketCombustion = false;
            bool isAdmin = false;


            //activoProcTicketCombustion = bool.Parse(confProcesarValidaciones.Valor);
            activoProcFormEdicioinTicketCombustion = bool.Parse(confActivarFormularioEdicion.Valor); //

            //Si no estan activos ningun check no se comprueba nada
            //if (!activoProcTicketCombustion && !activoProcFormEdicioinTicketCombustion)
            if (!activoProcFormEdicioinTicketCombustion)
                return false;

            //Si ya tiene ticket de combustion no es necesario abrir el ticket de combustion.
            List<TicketCombustionDTO> lTicketCombustionDTO = TicketCombustion.ObtenerPorCodContratoYCodvisitaOIdSolicitud(codContrato, null, Convert.ToInt16(codVisita));

            //Si solo hay un ticket de combustion los cargamos.
            if (lTicketCombustionDTO != null && lTicketCombustionDTO.Count > 0)
                return false;


            //obtenemos el equipamiento de la visita para comprobar si el ultimo equipamiento es un cocina
            /*
            bool existCocina = false;
            List<EquipamientoDTO> listaEquipamiento = Equipamientos.ObtenerEquipamientos(codContrato, (Int16)usuarioDTO.IdIdioma);
            if (listaEquipamiento != null && listaEquipamiento.Count > 0)
                existCocina = listaEquipamiento.Last().IdTipoEquipamiento == 1;

            //Si el tipo equipamiento es un 1(Cocina) no se debe de validar ni guardar el ticket de combustion aunque le corresponda por estado
            if (existCocina)
                return false;
            */

            //Comprobamos si el usuario es admin.
            isAdmin = usuarioDTO.Id_Perfil == 4; // 4 ADICO --> Administrador

            //Si la persona tiene perfil administrador no se le exige introducir ticket de combustion
            if (isAdmin)
                return false;

            //Obtenemos la visita.
            //visitasDTO = visitas.DatosVisitas(codContrato, codVisita);

            //Miramos que el proveedor que viene en la request sea uno de los proveedores parametrizados en el p_config
            string[] arrProveedoresTratar = confProveedores.Valor.Split(';');
            foreach (string proveedor in arrProveedoresTratar)
            {
                if (proveedor.ToUpper() == usuarioDTO.NombreProveedor.ToUpper())
                    existProveedor = true;
            }

            //Miramos que el estado de la visita que viene en la request sea uno de los estados parametrizado en el p_config
            //string[] arrEstadosVisita = confEstadosAntesCambioVisitaOpera.Valor.Split(';');
            //foreach (string estado in arrEstadosVisita)
            //{
            //    if (Enum.IsDefined(typeof(Enumerados.EstadosVisita), estado))
            //    {
            //        Enumerados.EstadosVisita enumEstados = (Enumerados.EstadosVisita)Enum.Parse(typeof(Enumerados.EstadosVisita), estado);

            //        if (!string.IsNullOrEmpty(enumEstados.ToString()) && int.Parse(visitasDTO.CodigoEstadoVisita.ToString()) == (int)enumEstados)
            //            existEstadoAntes = true;
            //    }
            //}

            //Miramos que el estado de la visita que viene en la request sea uno de los estados parametrizado en el p_config
            string[] arrEstados = confEstadosVisita.Valor.Split(';');
            foreach (string estado in arrEstados)
            {
                if (Enum.IsDefined(typeof(Enumerados.EstadosVisita), estado))
                {
                    Enumerados.EstadosVisita enumEstados = (Enumerados.EstadosVisita)Enum.Parse(typeof(Enumerados.EstadosVisita), estado);

                    if (!string.IsNullOrEmpty(enumEstados.ToString()) && estadoCambiaVisita == (int)enumEstados)
                        existEstadoDespues = true;
                }
            }

            //Si estan activas la validaciones y la edicion del formulario.
            //if (activoProcTicketCombustion && activoProcFormEdicioinTicketCombustion)
            if (activoProcFormEdicioinTicketCombustion)
            {
                //Si la persona conetada cumple con las siguientes condiciones
                //if (existProveedor && existEstadoAntes && existEstadoDespues)
                if (existProveedor && existEstadoDespues)
                    result = true;

                //Si la persona tiene perfil administrador y cumple con las siguientes condiciones
                //if (isAdmin && existEstadoAntes && existEstadoDespues)
                //if (isAdmin && existEstadoDespues)
                //    result = true;
            }

            if (result)
                msgErrorTicket = TicketCombustionError.TicketCombustionObligatorioEnEsteEstado.ToString();

            return result;
        }

        //Metodo para saber si debe tener ticket de combustion en el momento de guardar la solicitud via web
        public Boolean HayQueProcesarTicketCombustionDesdeWEB_Solicitud(UsuarioDTO usuarioDTO, string codContrato, string codSolicitud, string pSubTipoSol, int estadoCambiaVisita, ref string msgErrorTicket)
        {
            //ConfiguracionDTO confSubtipoSolicitud = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_SUB_TIPO_SOLICITUDES_A_TRATAR);
            //ConfiguracionDTO confEstadosVisita = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_SOLICITUDES_A_TRATAR);
            ConfiguracionDTO confProveedores = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_PROVEEDORES_A_TRATAR);
            //ConfiguracionDTO confProcesarValidaciones = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_VALIDACIONES_SOLICITUDES);
            ConfiguracionDTO confActivarFormularioEdicion = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ACTIVAR_FORMULARIO_EDICION);

            bool result = false;
            bool existEstadoDespues = false;
            bool existProveedor = false;
            bool existSubTipoSol = false;
            //bool activoProcTicketCombustion = false;
            bool activoProcFormEdicioinTicketCombustion = false;
            bool isAdmin = false;


            //activoProcTicketCombustion = bool.Parse(confProcesarValidaciones.Valor);
            activoProcFormEdicioinTicketCombustion = bool.Parse(confActivarFormularioEdicion.Valor); //

            //Si no estan activos ningun check no se comprueba nada
            //if (!activoProcTicketCombustion && !activoProcFormEdicioinTicketCombustion)
            if (!activoProcFormEdicioinTicketCombustion)
                return false;

            //Si ya tiene ticket de combustion no es necesario abrir el ticket de combustion.
            List<TicketCombustionDTO> lTicketCombustionDTO = TicketCombustion.ObtenerPorCodContratoYCodvisitaOIdSolicitud(codContrato, Convert.ToDecimal(codSolicitud), null);

            //Si solo hay un ticket de combustion los cargamos.
            if (lTicketCombustionDTO != null && lTicketCombustionDTO.Count > 0)
                return false;

            //Comprobamos si el usuario es admin.
            isAdmin = usuarioDTO.Id_Perfil == 4; // 4 ADICO --> Administrador

            //Si la persona tiene perfil administrador no se le exige introducir ticket de combustion
            if (isAdmin)
                return false;

            //Miramos que el proveedor que viene en la request sea uno de los proveedores parametrizados en el p_config
            string[] arrProveedoresTratar = confProveedores.Valor.Split(';');
            foreach (string proveedor in arrProveedoresTratar)
            {
                if (proveedor.ToUpper() == usuarioDTO.NombreProveedor.ToUpper())
                    existProveedor = true;
            }

            //Miramos que el sub tipo solicitud que viene en la request sea unos de sub tipo solilicitu parametrizado en el p_config
            //string[] arrSubtipoSolicitud = confSubtipoSolicitud.Valor.Split(';');
            //foreach (string subTipoSol in arrSubtipoSolicitud)
            //{
            //    if (Enum.IsDefined(typeof(Enumerados.SubtipoSolicitud), subTipoSol))
            //    {
            //        Enumerados.SubtipoSolicitud enumSubTipoSol = (Enumerados.SubtipoSolicitud)Enum.Parse(typeof(Enumerados.SubtipoSolicitud), subTipoSol);

            //        if (!string.IsNullOrEmpty(enumSubTipoSol.ToString()) && int.Parse(pSubTipoSol) == (int)enumSubTipoSol)
            //            existSubTipoSol = true;

            //    }
            //}

            //Miramos que el estado de la visita que viene en la request sea uno de los estados parametrizado en el p_config
            //string[] arrEstados = confEstadosVisita.Valor.Split(';');
            //foreach (string estado in arrEstados)
            //{
            //    if (Enum.IsDefined(typeof(Enumerados.EstadosSolicitudes), estado))
            //    {
            //        Enumerados.EstadosSolicitudes enumEstados = (Enumerados.EstadosSolicitudes)Enum.Parse(typeof(Enumerados.EstadosSolicitudes), estado);

            //        if (!string.IsNullOrEmpty(enumEstados.ToString()) && estadoCambiaVisita == (int)enumEstados)
            //            existEstadoDespues = true;
            //    }
            //}

            //Miramos que el sub tipo solicitud que viene en la request sea unos de sub tipo solilicitu parametrizado en el p_config
            existSubTipoSol = PValidacionesTicketCombustion.ComprobarSiSeDebeProcesarSubTipoSolicitud(pSubTipoSol);

            //Miramos que el estado de la visita que viene en la request sea uno de los estados parametrizado en el p_config
            existEstadoDespues = PValidacionesTicketCombustion.ComprobarSiExisteEstadoSolicitud(estadoCambiaVisita.ToString());



            //Si estan activas la validaciones y la edicion del formulario.
            //if (activoProcTicketCombustion && activoProcFormEdicioinTicketCombustion)
            if (activoProcFormEdicioinTicketCombustion)
            {
                //Si la persona conetada cumple con las siguientes condiciones
                if (existProveedor && existSubTipoSol  && existEstadoDespues)
                    result = true;

                //Si la persona tiene perfil administrador y cumple con las siguientes condiciones
                //if (isAdmin && existEstadoDespues)
                //    result = true;
            }

            if (result)
                msgErrorTicket = TicketCombustionError.TicketCombustionObligatorioEnEsteEstado.ToString();

            return result;
        }

        //Miramos que el sub tipo solicitud que viene en la request sea unos de sub tipo solilicitu parametrizado en el p_config
        public static bool ComprobarSiSeDebeProcesarSubTipoSolicitud(string pSubTipoSolicitud)
        {
            ConfiguracionDTO confSubtipoSolicitud = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_SUB_TIPO_SOLICITUDES_A_TRATAR);

            bool existSubTipoSol = false;

            string[] arrSubtipoSolicitud = confSubtipoSolicitud.Valor.Split(';');

            foreach (string subTipoSol in arrSubtipoSolicitud)
            {
                if (Enum.IsDefined(typeof(Enumerados.SubtipoSolicitud), subTipoSol))
                {
                    Enumerados.SubtipoSolicitud enumSubTipoSol = (Enumerados.SubtipoSolicitud)Enum.Parse(typeof(Enumerados.SubtipoSolicitud), subTipoSol);

                    if (!string.IsNullOrEmpty(enumSubTipoSol.ToString()) && int.Parse(pSubTipoSolicitud) == (int)enumSubTipoSol)
                    {
                        existSubTipoSol = true;
                        break;
                    }
                }
            }

            return existSubTipoSol;
        }

        
        //Miramos que el estado de la visita que viene en la request sea uno de los estados parametrizado en el p_config
        public static bool ComprobarSiExisteEstadoSolicitud(string pEstadoCambia)
        {
            ConfiguracionDTO confEstadosVisita = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_SOLICITUDES_A_TRATAR);

            bool existEstado = false;

            string[] arrEstados = confEstadosVisita.Valor.Split(';');

            foreach (string estado in arrEstados)
            {
                if (Enum.IsDefined(typeof(Enumerados.EstadosSolicitudes), estado))
                {
                    Enumerados.EstadosSolicitudes enumEstados = (Enumerados.EstadosSolicitudes)Enum.Parse(typeof(Enumerados.EstadosSolicitudes), estado);

                    if (!string.IsNullOrEmpty(enumEstados.ToString()) && int.Parse(pEstadoCambia) == (int)enumEstados)
                    { 
                        existEstado = true;
                        break;
                    }
                }
            }

            return existEstado;
        }

        public static bool ComprobarSiExisteEstadoSolicitudCuandoSolicitudResueltaYVisitaEnEstadoVisitaErronea(string pEstadoCambia)
        {
            ConfiguracionDTO confEstadosVisita = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_SOLICITUD_VISITAERRONEA);

            bool existEstado = false;

            string[] arrEstados = confEstadosVisita.Valor.Split(';');

            foreach (string estado in arrEstados)
            {
                if (Enum.IsDefined(typeof(Enumerados.EstadosSolicitudes), estado))
                {
                    Enumerados.EstadosSolicitudes enumEstados = (Enumerados.EstadosSolicitudes)Enum.Parse(typeof(Enumerados.EstadosSolicitudes), estado);

                    if (!string.IsNullOrEmpty(enumEstados.ToString()) && int.Parse(pEstadoCambia) == (int)enumEstados)
                    {
                        existEstado = true;
                        break;
                    }
                }
            }

            return existEstado;
        }

        public static void CerrarVisitaEnEstadoErroneaCuandoSolicitudResuelta(decimal pIdSolicitud, string pSubTipoSolicitud, string pEstadoCambia, string pUsuario)
        {
            //Miramos que el sub tipo solicitud que viene en la request sea unos de sub tipo solilicitu parametrizado en el p_config
            bool existSubTipoSol = ComprobarSiSeDebeProcesarSubTipoSolicitud(pSubTipoSolicitud);

            //20211221 BUA BEG R#35685 - Ticket combustion. Permitir cerrar visita erronea cuando solicitud averia asociada se cancela o Cerradas sin aceptar presupuesto
            //Miramos que el estado de la visita que viene en la request sea uno de los estados parametrizado en el p_config
            bool existEstado = ComprobarSiExisteEstadoSolicitudCuandoSolicitudResueltaYVisitaEnEstadoVisitaErronea(pEstadoCambia);

            if (existSubTipoSol && existEstado)
            {
                PValidacionesTicketCombustionDB pValidacionesTicketCombustionDB = new PValidacionesTicketCombustionDB();

                pValidacionesTicketCombustionDB.CerrarVisitaErroneaCuandoSolicitudResuelta(pIdSolicitud, pUsuario);                
            }
            //20211221 BUA BEG R#35685 - Ticket combustion. Permitir cerrar visita erronea cuando solicitud averia asociada se cancela o Cerradas sin aceptar presupuesto
        }

        public static void CerrarVisitaSolicitudErronea(TicketCombustionDTO requestTicketCombustionDTO
                                                        , CierreSolicitudResponse response
                                                        , string usuario
                                                        , string cambiaEstado)
        {
            ConfiguracionDTO confSubtipoSolicitud = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_SUB_TIPO_SOLICITUDES_A_TRATAR);
            string[] arrSubtipoSolicitud = confSubtipoSolicitud.Valor.Split(';');
            bool existSubTipoSol = false;

            //Miramos que el sub tipo solicitud que viene en la request sea unos de sub tipo solilicitu parametrizado en el p_config
            foreach (string subTipoSol in arrSubtipoSolicitud)
            {
                if (Enum.IsDefined(typeof(Enumerados.SubtipoSolicitud), subTipoSol))
                {
                    Enumerados.SubtipoSolicitud enumSubTipoSol = (Enumerados.SubtipoSolicitud)Enum.Parse(typeof(Enumerados.SubtipoSolicitud), subTipoSol);

                    if (!string.IsNullOrEmpty(enumSubTipoSol.ToString()) && requestTicketCombustionDTO.SubTipoSolicitud == (int)enumSubTipoSol)
                        existSubTipoSol = true;

                }
            }


            ConfiguracionDTO confEstadosVisita = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_SOLICITUDES_A_TRATAR);
            string[] arrEstados = confEstadosVisita.Valor.Split(';');
            bool existEstado = false;


            foreach (string estado in arrEstados)
            {
                if (Enum.IsDefined(typeof(Enumerados.EstadosSolicitudes), estado))
                {
                    Enumerados.EstadosSolicitudes enumEstados = (Enumerados.EstadosSolicitudes)Enum.Parse(typeof(Enumerados.EstadosSolicitudes), estado);

                    if (!string.IsNullOrEmpty(enumEstados.ToString()) && int.Parse(cambiaEstado) == (int)enumEstados)
                        existEstado = true; break;
                }
            }



            //if (requestTicketCombustionDTO.SubTipoSolicitud == (int)Enumerados.SubtipoSolicitud.VisitaIncorrecta
            //    || requestTicketCombustionDTO.SubTipoSolicitud == (int)Enumerados.SubtipoSolicitud.RevisionPorPrecinte
            //    || requestTicketCombustionDTO.SubTipoSolicitud == (int)Enumerados.SubtipoSolicitud.AveriaIncorrecta)
            //{
            if (existSubTipoSol && existEstado)
            { 
                //if (requestTicketCombustionDTO.EstadoActualSolicitud == (int)Enumerados.EstadosSolicitudes.Reparada
                //    || requestTicketCombustionDTO.EstadoActualSolicitud == (int)Enumerados.EstadosSolicitudes.ReparadaconDocumentacion)
                //{

                //ConfiguracionDTO confEstadosSol = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_ESTADOS_SOLICITUDES_A_TRATAR);

                string caracVisita = CaracteristicaHistorico.GetCaracteristicaValor(int.Parse(requestTicketCombustionDTO.IdSolicitud.ToString()), "188");
                string caracSolicitud = CaracteristicaHistorico.GetCaracteristicaValor(int.Parse(requestTicketCombustionDTO.IdSolicitud.ToString()), "189");

                //Cerramos la visita en estado VisiataErronea
                if (!string.IsNullOrEmpty(caracVisita))
                {
                    Visitas visitas = new Visitas();
                    VisitaDTO visitasDTO = null;

                    //visitasDTO = visitas.DatosVisitasWS(requestTicketCombustionDTO.CodigoContrato, requestTicketCombustionDTO.CodigoVisita.ToString(), requestTicketCombustionDTO.Proveedor);
                    visitasDTO = visitas.DatosVisitasWS(requestTicketCombustionDTO.CodigoContrato, caracVisita, requestTicketCombustionDTO.Proveedor);

                    if (visitasDTO != null && (int.Parse(visitasDTO.CodigoEstadoVisita) != int.Parse(StringEnum.GetStringValue(Enumerados.EstadosVisita.Cerrada))))
                    {
                        visitasDTO.CodigoEstadoVisita = StringEnum.GetStringValue(Enumerados.EstadosVisita.Cerrada); //2 --> Cerrada
                        visitasDTO.Observaciones = "Se cierra la visita por solventarse la anomalia critica detectada.";
                        visitasDTO.FechaVisita = DateTime.Parse(DateTime.Today.ToString("yyyy-MM-dd 00:00:00.000"));

                        Visitas.ActualizarDatosVisitaYVisitaHistoricoWS(visitasDTO, usuario);
                    }
                }

                //Cerramos la solicitud en estado VisitaErronea
                if (!string.IsNullOrEmpty(caracSolicitud))
                {
                    Solicitud solicitud = new Solicitud();
                    SolicitudesDB objSolicitudesDB = new SolicitudesDB();

                    string observaciones_Cerrar = "Se cierra la solicitud por solventarse la anomalia critica detectada.";
                    CamposSolicitud camposSol = RecuperarValoresSolicitud(caracSolicitud, "002", usuario, "", observaciones_Cerrar, "");

                    //1. MODIFICAR solicitud actual. como erronea, cambiar estado a "Errónea"
                    //Cambiamos de estado
                    string codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.Cerrada); //47 --> Cerrada

                    switch (requestTicketCombustionDTO.SubTipoSolicitud) //
                    {
                        case (int)Enumerados.SubtipoSolicitud.VisitaIncorrecta:
                            codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.VisitaRealizada); //14 --> VisitaRealizada
                            break;
                        case (int)Enumerados.SubtipoSolicitud.AveriaIncorrecta:
                            codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.Reparada); //14 --> VisitaRealizada
                            break;
                        case (int)Enumerados.SubtipoSolicitud.RevisionPorPrecinte:
                            codEstadoSol = StringEnum.GetStringValue(Enumerados.EstadosSolicitudes.VisitaRealizada); //14 --> VisitaRealizada
                            break;
                        //default:
                        //    Console.WriteLine("Default case");
                        //    break;
                    }

                    solicitud.CambiarEstadoSolicitud(Convert.ToInt32(camposSol.IdSolicitud), codEstadoSol, usuario);

                    //Actualizamos las observaciones en la solicitud.
                    objSolicitudesDB.UpdateObservacionesSolicitud(camposSol.IdSolicitud, camposSol.Observaciones);

                    //Recuperamos la informacion de la solicitud modificada
                    camposSol = RecuperarValoresSolicitud(camposSol.IdSolicitud, "002", usuario, "", "", "");

                    //Guardamos en el hitorico, enviamos las interacciones
                    int id_movimiento = solicitud.ActualizarHistoricoSolicitud(camposSol.CodContrato, camposSol.IdSolicitud, "002", usuario, camposSol.CodEstadoSol, camposSol.Observaciones, camposSol.Proveedor, camposSol.CodSubtipoSolicitud, camposSol.CodAveria, camposSol.CodVisita, "M");

                }
                //}
            }
        }

        //metodo que que devuelve si el ticket que se esta introduciendo pertenece a las nuevas comprobaciones.
        public static bool ActivarCamposEnFormTicketWEB(string codContrato, decimal idSolicitud, int codVisita, string tipoVisitaEnWEB)
        {
            ConfiguracionDTO confValidacionesActiva = null;

            if (codVisita > 0)
                confValidacionesActiva = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_VALIDACION_ACTIVA_VISITAS);
            else
                confValidacionesActiva = Configuracion.ObtenerConfiguracion(Enumerados.Configuracion.TICKET_COMBUSTION_VALIDACION_ACTIVA_SOLICITUDES);

            if ((confValidacionesActiva.Valor == "CierreVisita_V.2021" || confValidacionesActiva.Valor == "CierreSolicitud_V.2021")
                && (tipoVisitaEnWEB == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.ANOMALIASECUNDARIA) || tipoVisitaEnWEB == StringEnum.GetStringValue(Enumerados.EnumTipoVisita.PRECINTADODEINSTALACION)))
            {
                return true;
            }

            return false;
        }

        public static decimal? GuardarTicketCombustionResumenResultado(TicketCombustionDTO dto, string origen, decimal? idTraza, string usuario, string resultado)
        {            
            PValidacionesTicketCombustionDB db = new PValidacionesTicketCombustionDB();

            return db.InsertarTicketCombustionResumenResultado(dto, origen, idTraza, usuario, resultado);
        }

        #endregion Public Methods	   
    }
}